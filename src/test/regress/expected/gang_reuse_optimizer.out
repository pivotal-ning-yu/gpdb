-- This test is to verify the order of reusing idle gangs.
--
-- For example:
-- In the same session,
-- query 1 has 3 slices and it creates gang 1, gang 2 and gang 3.
-- query 2 has 2 slices, we hope it reuses gang 1 and gang 2 instead of other
-- cases like gang 3 and gang 2.
-- 
-- In this way, the two queries can have the same send-receive port pair. It's
-- useful in platform like Azure. Because Azure limits the number of different
-- send-receive port pairs (AKA flow) in a certain time period.
-- To verify the order we show the gang id in EXPLAIN ANALYZE output when
-- gp_log_gang is 'debug', turn on this output.
set gp_log_gang to 'debug';
set gp_cached_segworkers_threshold to 10;
set gp_vmem_idle_resource_timeout to '60s';
set optimizer_enable_motion_broadcast to off;
create table test_gang_reuse_t1 (c1 int, c2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- this query will create 3 reader gangs with ids 2, 3 and 4, we expect they
-- will always be reused in the same order
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
  join test_gang_reuse_t1 c using (c2)
;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1293.00 rows=1 width=8)
   Rows out:  1 rows with 0.084 ms to first row, 0.085 ms to end.
   ->  Gather Motion 3:1  (slice4; gang1; segments: 3)  (cost=0.00..1293.00 rows=1 width=8)
         Rows out:  3 rows at destination with 0.061 ms to first row, 0.068 ms to end.
         ->  Aggregate  (cost=0.00..1293.00 rows=1 width=8)
               Rows out:  Avg 1.0 rows x 3 workers.  Max 1 rows (seg0) with 63 ms to end.
               ->  Hash Join  (cost=0.00..1293.00 rows=1 width=1)
                     Hash Cond: public.test_gang_reuse_t1.c2 = public.test_gang_reuse_t1.c2
                     Rows out:  0 rows (seg0) with 63 ms to end.
                     ->  Redistribute Motion 3:3  (slice1; gang2; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                           Hash Key: public.test_gang_reuse_t1.c2
                           Rows out:  (No row requested) 0 rows at destination (seg0) with 0 ms to end.
                           ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                 Rows out:  0 rows (seg0) with 0.085 ms to end.
                     ->  Hash  (cost=862.00..862.00 rows=1 width=4)
                           Rows in:  0 rows (seg0) with 59 ms to end, start offset by 279 ms.
                           ->  Hash Join  (cost=0.00..862.00 rows=1 width=4)
                                 Hash Cond: public.test_gang_reuse_t1.c2 = public.test_gang_reuse_t1.c2
                                 Rows out:  0 rows (seg0) with 59 ms to end.
                                 ->  Redistribute Motion 3:3  (slice2; gang3; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                                       Hash Key: public.test_gang_reuse_t1.c2
                                       Rows out:  (No row requested) 0 rows at destination (seg0) with 0 ms to end.
                                       ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                             Rows out:  0 rows (seg0) with 0.094 ms to end.
                                 ->  Hash  (cost=431.00..431.00 rows=1 width=4)
                                       Rows in:  0 rows (seg0) with 56 ms to end, start offset by 281 ms.
                                       ->  Redistribute Motion 3:3  (slice3; gang4; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                                             Hash Key: public.test_gang_reuse_t1.c2
                                             Rows out:  0 rows at destination (seg0) with 56 ms to end.
                                             ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                                   Rows out:  0 rows (seg0) with 0.155 ms to end.
 Slice statistics:
   (slice0)    Executor memory: 386K bytes.
   (slice1)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice2)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice3)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice4)    Executor memory: 8443K bytes avg x 3 workers, 8443K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  optimizer=on
 Optimizer status: PQO version 3.55.0
 Total runtime: 920.488 ms
(42 rows)

-- so in this query the gangs 2 and 3 should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..862.00 rows=1 width=8)
   Rows out:  1 rows with 0.099 ms to first row, 0.100 ms to end.
   ->  Gather Motion 3:1  (slice3; gang1; segments: 3)  (cost=0.00..862.00 rows=1 width=8)
         Rows out:  3 rows at destination with 0.076 ms to first row, 0.084 ms to end.
         ->  Aggregate  (cost=0.00..862.00 rows=1 width=8)
               Rows out:  Avg 1.0 rows x 3 workers.  Max 1 rows (seg0) with 47 ms to end.
               ->  Hash Join  (cost=0.00..862.00 rows=1 width=1)
                     Hash Cond: public.test_gang_reuse_t1.c2 = public.test_gang_reuse_t1.c2
                     Rows out:  0 rows (seg0) with 47 ms to end.
                     ->  Redistribute Motion 3:3  (slice1; gang2; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                           Hash Key: public.test_gang_reuse_t1.c2
                           Rows out:  (No row requested) 0 rows at destination (seg0) with 0 ms to end.
                           ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                 Rows out:  0 rows (seg0) with 0.025 ms to end.
                     ->  Hash  (cost=431.00..431.00 rows=1 width=4)
                           Rows in:  0 rows (seg0) with 41 ms to end, start offset by 108 ms.
                           ->  Redistribute Motion 3:3  (slice2; gang3; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                                 Hash Key: public.test_gang_reuse_t1.c2
                                 Rows out:  0 rows at destination (seg0) with 41 ms to end.
                                 ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                       Rows out:  0 rows (seg0) with 0.024 ms to end.
 Slice statistics:
   (slice0)    Executor memory: 386K bytes.
   (slice1)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice2)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice3)    Executor memory: 8363K bytes avg x 3 workers, 8363K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  optimizer=on
 Optimizer status: PQO version 3.55.0
 Total runtime: 596.603 ms
(31 rows)

-- so in this query the gangs 2, 3 and 4 should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
  join test_gang_reuse_t1 c using (c2)
;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1293.00 rows=1 width=8)
   Rows out:  1 rows with 0.066 ms to first row, 0.067 ms to end.
   ->  Gather Motion 3:1  (slice4; gang1; segments: 3)  (cost=0.00..1293.00 rows=1 width=8)
         Rows out:  3 rows at destination with 0.033 ms to first row, 0.044 ms to end.
         ->  Aggregate  (cost=0.00..1293.00 rows=1 width=8)
               Rows out:  Avg 1.0 rows x 3 workers.  Max 1 rows (seg0) with 69 ms to end.
               ->  Hash Join  (cost=0.00..1293.00 rows=1 width=1)
                     Hash Cond: public.test_gang_reuse_t1.c2 = public.test_gang_reuse_t1.c2
                     Rows out:  0 rows (seg0) with 69 ms to end.
                     ->  Redistribute Motion 3:3  (slice1; gang2; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                           Hash Key: public.test_gang_reuse_t1.c2
                           Rows out:  (No row requested) 0 rows at destination (seg0) with 0 ms to end.
                           ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                 Rows out:  0 rows (seg0) with 0.024 ms to end.
                     ->  Hash  (cost=862.00..862.00 rows=1 width=4)
                           Rows in:  0 rows (seg0) with 66 ms to end, start offset by 139 ms.
                           ->  Hash Join  (cost=0.00..862.00 rows=1 width=4)
                                 Hash Cond: public.test_gang_reuse_t1.c2 = public.test_gang_reuse_t1.c2
                                 Rows out:  0 rows (seg0) with 66 ms to end.
                                 ->  Redistribute Motion 3:3  (slice2; gang3; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                                       Hash Key: public.test_gang_reuse_t1.c2
                                       Rows out:  (No row requested) 0 rows at destination (seg0) with 0 ms to end.
                                       ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                             Rows out:  0 rows (seg0) with 0.021 ms to end.
                                 ->  Hash  (cost=431.00..431.00 rows=1 width=4)
                                       Rows in:  0 rows (seg0) with 63 ms to end, start offset by 141 ms.
                                       ->  Redistribute Motion 3:3  (slice3; gang4; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                                             Hash Key: public.test_gang_reuse_t1.c2
                                             Rows out:  0 rows at destination (seg0) with 63 ms to end.
                                             ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                                   Rows out:  0 rows (seg0) with 0.023 ms to end.
 Slice statistics:
   (slice0)    Executor memory: 386K bytes.
   (slice1)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice2)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice3)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice4)    Executor memory: 8443K bytes avg x 3 workers, 8443K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  optimizer=on
 Optimizer status: PQO version 3.55.0
 Total runtime: 796.510 ms
(42 rows)

-- so in this query the gangs 2 and 3 should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..862.00 rows=1 width=8)
   Rows out:  1 rows with 0.086 ms to first row, 0.087 ms to end.
   ->  Gather Motion 3:1  (slice3; gang1; segments: 3)  (cost=0.00..862.00 rows=1 width=8)
         Rows out:  3 rows at destination with 0.062 ms to first row, 0.069 ms to end.
         ->  Aggregate  (cost=0.00..862.00 rows=1 width=8)
               Rows out:  Avg 1.0 rows x 3 workers.  Max 1 rows (seg0) with 52 ms to end.
               ->  Hash Join  (cost=0.00..862.00 rows=1 width=1)
                     Hash Cond: public.test_gang_reuse_t1.c2 = public.test_gang_reuse_t1.c2
                     Rows out:  0 rows (seg0) with 52 ms to end.
                     ->  Redistribute Motion 3:3  (slice1; gang2; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                           Hash Key: public.test_gang_reuse_t1.c2
                           Rows out:  (No row requested) 0 rows at destination (seg0) with 0 ms to end.
                           ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                 Rows out:  0 rows (seg0) with 0.025 ms to end.
                     ->  Hash  (cost=431.00..431.00 rows=1 width=4)
                           Rows in:  0 rows (seg0) with 47 ms to end, start offset by 105 ms.
                           ->  Redistribute Motion 3:3  (slice2; gang3; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                                 Hash Key: public.test_gang_reuse_t1.c2
                                 Rows out:  0 rows at destination (seg0) with 47 ms to end.
                                 ->  Table Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4)
                                       Rows out:  0 rows (seg0) with 0.023 ms to end.
 Slice statistics:
   (slice0)    Executor memory: 386K bytes.
   (slice1)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice2)    Executor memory: 171K bytes avg x 3 workers, 171K bytes max (seg0).
   (slice3)    Executor memory: 8363K bytes avg x 3 workers, 8363K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  optimizer=on
 Optimizer status: PQO version 3.55.0
 Total runtime: 594.696 ms
(31 rows)

