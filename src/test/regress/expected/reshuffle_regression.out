-- start_ignore
create extension if not exists gp_debug_numsegments;
create language plpythonu;
-- end_ignore
drop schema if exists test_reshuffle_regression cascade;
create schema test_reshuffle_regression;
set search_path=test_reshuffle_regression,public;
--
-- derived from src/pl/plpython/sql/plpython_trigger.sql
--
-- with some hacks we could insert data into incorrect segments, reshuffle node
-- should tolerant this.
--
-- with this trigger the inserted data is always hacked to '12345'
create function trig12345() returns trigger language plpythonu as $$
    TD["new"]["data"] = '12345'
    return 'modify'
$$;
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

create table b(data int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'data' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select gp_debug_reset_create_table_default_numsegments();
 gp_debug_reset_create_table_default_numsegments 
-------------------------------------------------
 
(1 row)

-- by default '12345' should be inserted on seg0
insert into b values ('12345');
select gp_segment_id, * from b;
 gp_segment_id | data  
---------------+-------
             0 | 12345
(1 row)

truncate b;
create trigger b_t before insert on b for each row execute procedure trig12345();
-- however with the trigger it is inserted on seg1
insert into b select i from generate_series(1, 10) i;
select gp_segment_id, * from b;
 gp_segment_id | data  
---------------+-------
             0 | 12345
             0 | 12345
             0 | 12345
             0 | 12345
             1 | 12345
             1 | 12345
             1 | 12345
             1 | 12345
             1 | 12345
             1 | 12345
(10 rows)

-- reshuffle node should tolerant it
alter table b expand table;
select gp_segment_id, * from b;
 gp_segment_id | data  
---------------+-------
             2 | 12345
             2 | 12345
             2 | 12345
             2 | 12345
             2 | 12345
             2 | 12345
             2 | 12345
             2 | 12345
             2 | 12345
             2 | 12345
(10 rows)

--
-- derived from gp_upgrade_cornercases.sql
--
-- for inherited tables the parent and its children are allowed to have
-- different numsegments, this happens when a child is expanded before its
-- parent.  then when expanding the parent its children are also expanded, so
-- the child is re-expanded although there is nothing to do.  reshuffle node
-- should ignore these already expanded children instead of raising an error.
--
select gp_debug_set_create_table_default_numsegments(1);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 1
(1 row)

create table root2 (a int, b int, c int) distributed by (a);
create table child2 (d int) inherits (root2);
NOTICE:  table has parent, setting distribution columns to match parent table
select gp_debug_reset_create_table_default_numsegments();
 gp_debug_reset_create_table_default_numsegments 
-------------------------------------------------
 
(1 row)

insert into root2 values (1, 2, 3), (4, 5, 6), (7, 8, 9);
insert into child2
values (10, 100, 1000, 10000),
       (11, 111, 1111, 11111),
       (12, 123, 1234, 12345);
select gp_segment_id, * from root2;
 gp_segment_id | a  |  b  |  c   
---------------+----+-----+------
             0 |  1 |   2 |    3
             0 |  4 |   5 |    6
             0 |  7 |   8 |    9
             0 | 10 | 100 | 1000
             0 | 11 | 111 | 1111
             0 | 12 | 123 | 1234
(6 rows)

select gp_segment_id, * from child2;
 gp_segment_id | a  |  b  |  c   |   d   
---------------+----+-----+------+-------
             0 | 10 | 100 | 1000 | 10000
             0 | 11 | 111 | 1111 | 11111
             0 | 12 | 123 | 1234 | 12345
(3 rows)

-- expand the child first
alter table child2 expand table;
-- then expand the parent, so the child is re-expanded
alter table root2 expand table;
select gp_segment_id, * from root2;
 gp_segment_id | a  |  b  |  c   
---------------+----+-----+------
             2 |  1 |   2 |    3
             0 |  4 |   5 |    6
             0 |  7 |   8 |    9
             0 | 11 | 111 | 1111
             1 | 10 | 100 | 1000
             1 | 12 | 123 | 1234
(6 rows)

select gp_segment_id, * from child2;
 gp_segment_id | a  |  b  |  c   |   d   
---------------+----+-----+------+-------
             0 | 11 | 111 | 1111 | 11111
             1 | 10 | 100 | 1000 | 10000
             1 | 12 | 123 | 1234 | 12345
(3 rows)

