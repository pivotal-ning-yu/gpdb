\set has_oids true
-- start_ignore
create extension if not exists gp_debug_numsegments;
-- end_ignore
drop schema if exists test_reshuffle cascade;
create schema test_reshuffle;
set search_path=test_reshuffle,public;
set gp_default_storage_options='appendonly=false';
set allow_system_table_mods=true;
set gp_expand_method = move;
-- Hash distributed tables
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

Create table t1(a int, b int, c int) distributed by (a);
insert into t1 select i,i,0 from generate_series(1,100) I;
Update t1 set c = gp_segment_id;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |    51
             0 |    49
(2 rows)

begin;
Alter table t1 expand table;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |    32
             2 |    28
             1 |    40
(3 rows)

abort;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |    51
             0 |    49
(2 rows)

Alter table t1 expand table;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |    28
             0 |    32
             1 |    40
(3 rows)

select numsegments from gp_distribution_policy where localoid='t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1;
select gp_debug_set_create_table_default_numsegments(1);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 1
(1 row)

Create table t1(a int, b int, c int) with (OIDS=:has_oids) distributed by (a,b);
NOTICE:  OIDS=TRUE is not recommended for user-created tables
HINT:  Use OIDS=FALSE to prevent wrap-around of the OID counter.
insert into t1 select i,i,0 from generate_series(1,100) I;
Update t1 set c = gp_segment_id;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |   100
(1 row)

begin;
Alter table t1 expand table;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |    34
             1 |    35
             0 |    31
(3 rows)

abort;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |   100
(1 row)

Alter table t1 expand table;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |    34
             1 |    35
             0 |    31
(3 rows)

select numsegments from gp_distribution_policy where localoid='t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1;
-- Test NULLs.
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

Create table t1(a int, b int, c int) distributed by (a,b,c);
insert into t1 values
  (1,    1,    1   ),
  (null, 2,    2   ),
  (3,    null, 3   ),
  (4,    4,    null),
  (null, null, 5   ),
  (null, 6,    null),
  (7,    null, null),
  (null, null, null);
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |     4
             0 |     4
(2 rows)

begin;
Alter table t1 expand table;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |     2
             2 |     3
             1 |     3
(3 rows)

abort;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |     4
             0 |     4
(2 rows)

Alter table t1 expand table;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |     3
             1 |     3
             0 |     2
(3 rows)

select numsegments from gp_distribution_policy where localoid='t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1;
select gp_debug_set_create_table_default_numsegments(1);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 1
(1 row)

Create table t1(a int, b int, c int) distributed by (a) partition by list(b) (partition t1_1 values(1), partition t1_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_1" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_t1_2" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_other" for table "t1"
insert into t1 select i,i,0 from generate_series(1,100) I;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |   100
(1 row)

begin;
Alter table t1 expand table;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |    28
             1 |    40
             0 |    32
(3 rows)

abort;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |   100
(1 row)

Alter table t1 expand table;
Select gp_segment_id, count(*) from t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |    40
             2 |    28
             0 |    32
(3 rows)

select numsegments from gp_distribution_policy where localoid='t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1;
-- Random distributed tables
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

Create table r1(a int, b int, c int) distributed randomly;
insert into r1 select i,i,0 from generate_series(1,100) I;
Update r1 set c = gp_segment_id;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

begin;
Alter table r1 expand table;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

abort;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

Alter table r1 expand table;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

select numsegments from gp_distribution_policy where localoid='r1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1;
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

Create table r1(a int, b int, c int) with (OIDS=:has_oids) distributed randomly;
NOTICE:  OIDS=TRUE is not recommended for user-created tables
HINT:  Use OIDS=FALSE to prevent wrap-around of the OID counter.
insert into r1 select i,i,0 from generate_series(1,100) I;
Update r1 set c = gp_segment_id;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

begin;
Alter table r1 expand table;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

abort;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

Alter table r1 expand table;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

select numsegments from gp_distribution_policy where localoid='r1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1;
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

Create table r1(a int, b int, c int) distributed randomly partition by list(b) (partition r1_1 values(1), partition r1_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "r1_1_prt_r1_1" for table "r1"
NOTICE:  CREATE TABLE will create partition "r1_1_prt_r1_2" for table "r1"
NOTICE:  CREATE TABLE will create partition "r1_1_prt_other" for table "r1"
insert into r1 select i,i,0 from generate_series(1,100) I;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

begin;
Alter table r1 expand table;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

abort;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

Alter table r1 expand table;
Select count(*) from r1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

select numsegments from gp_distribution_policy where localoid='r1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1;
-- Replicated tables
select gp_debug_set_create_table_default_numsegments(1);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 1
(1 row)

Create table r1(a int, b int, c int) distributed replicated;
insert into r1 select i,i,0 from generate_series(1,100) I;
Select count(*) from gp_dist_random('r1');
 count 
-------
   100
(1 row)

begin;
Alter table r1 expand table;
Select count(*) from gp_dist_random('r1');
 count 
-------
   300
(1 row)

abort;
Select count(*) from gp_dist_random('r1');
 count 
-------
   100
(1 row)

Alter table r1 expand table;
Select count(*) from gp_dist_random('r1');
 count 
-------
   300
(1 row)

select numsegments from gp_distribution_policy where localoid='r1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1;
--
select gp_debug_set_create_table_default_numsegments(1);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 1
(1 row)

Create table r1(a int, b int, c int) with (OIDS=:has_oids) distributed replicated;
NOTICE:  OIDS=TRUE is not recommended for user-created tables
HINT:  Use OIDS=FALSE to prevent wrap-around of the OID counter.
insert into r1 select i,i,0 from generate_series(1,100) I;
Select count(*) from gp_dist_random('r1');
 count 
-------
   100
(1 row)

begin;
Alter table r1 expand table;
Select count(*) from gp_dist_random('r1');
 count 
-------
   300
(1 row)

abort;
Select count(*) from gp_dist_random('r1');
 count 
-------
   100
(1 row)

Alter table r1 expand table;
Select count(*) from gp_dist_random('r1');
 count 
-------
   300
(1 row)

select numsegments from gp_distribution_policy where localoid='r1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1;
-- table with update triggers on distributed key column
CREATE OR REPLACE FUNCTION trigger_func() RETURNS trigger AS $$
BEGIN
	RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
		TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

CREATE TABLE table_with_update_trigger(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into table_with_update_trigger select i,i,0 from generate_series(1,100) I;
select gp_segment_id, count(*) from table_with_update_trigger group by 1 order by 1;
 gp_segment_id | count 
---------------+-------
             0 |    49
             1 |    51
(2 rows)

CREATE TRIGGER foo_br_trigger BEFORE INSERT OR UPDATE OR DELETE ON table_with_update_trigger 
FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_stmt');
CREATE TRIGGER foo_ar_trigger AFTER INSERT OR UPDATE OR DELETE ON table_with_update_trigger 
FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_stmt');
CREATE TRIGGER foo_bs_trigger BEFORE INSERT OR UPDATE OR DELETE ON table_with_update_trigger 
FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('before_stmt');
CREATE TRIGGER foo_as_trigger AFTER INSERT OR UPDATE OR DELETE ON table_with_update_trigger 
FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('before_stmt');
-- update should fail
update table_with_update_trigger set a = a + 1;
ERROR:  UPDATE on distributed key column not allowed on relation with update triggers
-- reshuffle should success and not hiting any triggers.
Alter table table_with_update_trigger expand table;
select gp_segment_id, count(*) from table_with_update_trigger group by 1 order by 1;
 gp_segment_id | count 
---------------+-------
             0 |    32
             1 |    40
             2 |    28
(3 rows)

--
-- Test reshuffle inheritance parent table, parent table has different numsegments with
-- child tables.
--
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

create table mix_base_tbl (a int4, b int4) distributed by (a);
insert into mix_base_tbl select g, g from generate_series(1, 3) g;
select gp_debug_set_create_table_default_numsegments('full');
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 FULL
(1 row)

create table mix_child_a (a int4, b int4) inherits (mix_base_tbl) distributed by (a);
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
insert into mix_child_a select g, g from generate_series(11, 13) g;
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

create table mix_child_b (a int4, b int4) inherits (mix_base_tbl) distributed by (b);
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
insert into mix_child_b select g, g from generate_series(21, 23) g;
select gp_segment_id, * from mix_base_tbl order by 2, 1;
 gp_segment_id | a  | b  
---------------+----+----
             0 |  1 |  1
             1 |  2 |  2
             1 |  3 |  3
             0 | 11 | 11
             1 | 12 | 12
             2 | 13 | 13
             0 | 21 | 21
             1 | 22 | 22
             0 | 23 | 23
(9 rows)

-- update distributed column, numsegments does not change
update mix_base_tbl set a=a+1;
select gp_segment_id, * from mix_base_tbl order by 2, 1;
 gp_segment_id | a  | b  
---------------+----+----
             1 |  2 |  1
             1 |  3 |  2
             0 |  4 |  3
             1 | 12 | 11
             2 | 13 | 12
             2 | 14 | 13
             0 | 22 | 21
             1 | 23 | 22
             0 | 24 | 23
(9 rows)

-- reshuffle the parent table, both parent and child table will be rebalanced to all
-- segments
Alter table mix_base_tbl expand table;
select gp_segment_id, * from mix_base_tbl order by 2, 1;
 gp_segment_id | a  | b  
---------------+----+----
             1 |  2 |  1
             2 |  3 |  2
             0 |  4 |  3
             1 | 12 | 11
             2 | 13 | 12
             2 | 14 | 13
             0 | 22 | 21
             1 | 23 | 22
             2 | 24 | 23
(9 rows)

-- multi-level partition tables
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

CREATE TABLE part_t1(a int, b int, c int, d int, e int)
DISTRIBUTED BY(a)
PARTITION BY RANGE (b)
    SUBPARTITION BY RANGE (c)
        SUBPARTITION TEMPLATE (
            START(1) END (3) EVERY(1),
            DEFAULT SUBPARTITION others_c)
    SUBPARTITION BY LIST (d)
        SUBPARTITION TEMPLATE (
            SUBPARTITION one VALUES (1),
            SUBPARTITION two VALUES (2),
            SUBPARTITION three VALUES (3),
            DEFAULT SUBPARTITION others_d)
( START (1) END (2) EVERY (1),
    DEFAULT PARTITION other_b);
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b" for table "part_t1"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2" for table "part_t1"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_one" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_two" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_three" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_one" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_two" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_three" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_one" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_two" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_three" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_3"
insert into part_t1 select i,i%3,i%4,i%5,i from generate_series(1,100) I;
Update part_t1 set e = gp_segment_id;
Select gp_segment_id, count(*) from part_t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |    51
             0 |    49
(2 rows)

begin;
Alter table part_t1 expand table;
Select gp_segment_id, count(*) from part_t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |    28
             1 |    40
             0 |    32
(3 rows)

abort;
Select gp_segment_id, count(*) from part_t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |    51
             0 |    49
(2 rows)

Alter table part_t1 expand table;
Select gp_segment_id, count(*) from part_t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |    32
             2 |    28
             1 |    40
(3 rows)

select numsegments from gp_distribution_policy where localoid='part_t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table part_t1;
--
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

CREATE TABLE part_t1(a int, b int, c int, d int, e int)
DISTRIBUTED RANDOMLY
PARTITION BY RANGE (b)
    SUBPARTITION BY RANGE (c)
        SUBPARTITION TEMPLATE (
            START(1) END (3) EVERY(1),
            DEFAULT SUBPARTITION others_c)
    SUBPARTITION BY LIST (d)
        SUBPARTITION TEMPLATE (
            SUBPARTITION one VALUES (1),
            SUBPARTITION two VALUES (2),
            SUBPARTITION three VALUES (3),
            DEFAULT SUBPARTITION others_d)
( START (1) END (2) EVERY (1),
    DEFAULT PARTITION other_b);
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b" for table "part_t1"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2" for table "part_t1"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_one" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_two" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_three" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_one" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_two" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_three" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_one" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_two" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_three" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_3"
insert into part_t1 select i,i%3,i%4,i%5,i from generate_series(1,100) I;
Update part_t1 set e = gp_segment_id;
Select count(*) from part_t1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from part_t1 where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

begin;
Alter table part_t1 expand table;
Select count(*) from part_t1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from part_t1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

abort;
Select count(*) from part_t1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from part_t1 where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

Alter table part_t1 expand table;
Select count(*) from part_t1;
 count 
-------
   100
(1 row)

Select count(*) > 0 from part_t1 where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

select numsegments from gp_distribution_policy where localoid='part_t1'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table part_t1;
-- only reshuffle leaf partitions, not allowed now
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

CREATE TABLE part_t1(a int, b int, c int, d int, e int)
DISTRIBUTED BY(a)
PARTITION BY RANGE (b)
    SUBPARTITION BY RANGE (c)
        SUBPARTITION TEMPLATE (
            START(1) END (3) EVERY(1),
            DEFAULT SUBPARTITION others_c)
    SUBPARTITION BY LIST (d)
        SUBPARTITION TEMPLATE (
            SUBPARTITION one VALUES (1),
            SUBPARTITION two VALUES (2),
            SUBPARTITION three VALUES (3),
            DEFAULT SUBPARTITION others_d)
( START (1) END (2) EVERY (1),
    DEFAULT PARTITION other_b);
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b" for table "part_t1"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_others_c_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_2_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3" for table "part_t1_1_prt_other_b"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_one" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_two" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_three" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_other_b_2_prt_3_3_prt_others_d" for table "part_t1_1_prt_other_b_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2" for table "part_t1"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_one" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_two" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_three" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_others_c_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_others_c"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_one" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_two" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_three" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_2_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3" for table "part_t1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_one" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_two" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_three" for table "part_t1_1_prt_2_2_prt_3"
NOTICE:  CREATE TABLE will create partition "part_t1_1_prt_2_2_prt_3_3_prt_others_d" for table "part_t1_1_prt_2_2_prt_3"
insert into part_t1 select i,i%3,i%4,i%5,i from generate_series(1,100) I;
Update part_t1 set e = gp_segment_id;
select gp_segment_id, * from part_t1_1_prt_other_b_2_prt_2_3_prt_others_d;
 gp_segment_id | a  | b | c | d | e 
---------------+----+---+---+---+---
             1 |  5 | 2 | 1 | 0 | 1
             1 |  9 | 0 | 1 | 4 | 1
             1 | 45 | 0 | 1 | 0 | 1
             0 | 29 | 2 | 1 | 4 | 0
             0 | 65 | 2 | 1 | 0 | 0
             0 | 69 | 0 | 1 | 4 | 0
             0 | 89 | 2 | 1 | 4 | 0
(7 rows)

alter table part_t1_1_prt_other_b_2_prt_2_3_prt_others_d expand table;
ERROR:  cannot expand leaf or interior partition "part_t1_1_prt_other_b_2_prt_2_3_prt_others_d"
DETAIL:  root/leaf/interior partitions need to have same numsegments
HINT:  use "ALTER TABLE part_t1 EXPAND TABLE" instead
select gp_segment_id, * from part_t1_1_prt_other_b_2_prt_2_3_prt_others_d;
 gp_segment_id | a  | b | c | d | e 
---------------+----+---+---+---+---
             0 | 29 | 2 | 1 | 4 | 0
             0 | 65 | 2 | 1 | 0 | 0
             0 | 69 | 0 | 1 | 4 | 0
             0 | 89 | 2 | 1 | 4 | 0
             1 |  5 | 2 | 1 | 0 | 1
             1 |  9 | 0 | 1 | 4 | 1
             1 | 45 | 0 | 1 | 0 | 1
(7 rows)

-- try to reshuffle root partition, should success
Alter table part_t1 expand table;
Select gp_segment_id, count(*) from part_t1 group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |    32
             2 |    28
             1 |    40
(3 rows)

drop table part_t1;
-- inherits tables
select gp_debug_set_create_table_default_numsegments(2);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 2
(1 row)

CREATE TABLE inherit_t1_p1(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE inherit_t1_p2(a int, b int) INHERITS (inherit_t1_p1);
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
CREATE TABLE inherit_t1_p3(a int, b int) INHERITS (inherit_t1_p1);
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
CREATE TABLE inherit_t1_p4(a int, b int) INHERITS (inherit_t1_p2);
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
CREATE TABLE inherit_t1_p5(a int, b int) INHERITS (inherit_t1_p3);
NOTICE:  table has parent, setting distribution columns to match parent table
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
insert into inherit_t1_p1 select i,i from generate_series(1,10) i;
insert into inherit_t1_p2 select i,i from generate_series(1,10) i;
insert into inherit_t1_p3 select i,i from generate_series(1,10) i;
insert into inherit_t1_p4 select i,i from generate_series(1,10) i;
insert into inherit_t1_p5 select i,i from generate_series(1,10) i;
select count(*) > 0 from inherit_t1_p1 where gp_segment_id = 2;
 ?column? 
----------
 f
(1 row)

begin;
alter table inherit_t1_p1 expand table;
select count(*) > 0 from inherit_t1_p1 where gp_segment_id = 2;
 ?column? 
----------
 t
(1 row)

abort;
select count(*) > 0 from inherit_t1_p1 where gp_segment_id = 2;
 ?column? 
----------
 f
(1 row)

alter table inherit_t1_p1 expand table;
select count(*) > 0 from inherit_t1_p1 where gp_segment_id = 2;
 ?column? 
----------
 t
(1 row)

DROP TABLE inherit_t1_p1 CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table inherit_t1_p2
drop cascades to table inherit_t1_p4
drop cascades to table inherit_t1_p3
drop cascades to table inherit_t1_p5
--
-- Test EXPAND, on a table that doesn't need expanding. Should be a no-op.
--
CREATE TABLE expand_noop(i int) distributed by (i);
ALTER TABLE expand_noop EXPAND TABLE;
ALTER TABLE expand_noop EXPAND TABLE;
