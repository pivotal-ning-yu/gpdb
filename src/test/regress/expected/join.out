--
-- JOIN
-- Test JOIN clauses
--
CREATE TABLE J1_TBL (
  i integer,
  j integer,
  t text
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE J2_TBL (
  i integer,
  k integer
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO J1_TBL VALUES (1, 4, 'one');
INSERT INTO J1_TBL VALUES (2, 3, 'two');
INSERT INTO J1_TBL VALUES (3, 2, 'three');
INSERT INTO J1_TBL VALUES (4, 1, 'four');
INSERT INTO J1_TBL VALUES (5, 0, 'five');
INSERT INTO J1_TBL VALUES (6, 6, 'six');
INSERT INTO J1_TBL VALUES (7, 7, 'seven');
INSERT INTO J1_TBL VALUES (8, 8, 'eight');
INSERT INTO J1_TBL VALUES (0, NULL, 'zero');
INSERT INTO J1_TBL VALUES (NULL, NULL, 'null');
INSERT INTO J1_TBL VALUES (NULL, 0, 'zero');
INSERT INTO J2_TBL VALUES (1, -1);
INSERT INTO J2_TBL VALUES (2, 2);
INSERT INTO J2_TBL VALUES (3, -3);
INSERT INTO J2_TBL VALUES (2, 4);
INSERT INTO J2_TBL VALUES (5, -5);
INSERT INTO J2_TBL VALUES (5, -5);
INSERT INTO J2_TBL VALUES (0, NULL);
INSERT INTO J2_TBL VALUES (NULL, NULL);
INSERT INTO J2_TBL VALUES (NULL, 0);
--
-- CORRELATION NAMES
-- Make sure that table/column aliases are supported
-- before diving into more complex join syntax.
--
SELECT '' AS "xxx", *
  FROM J1_TBL AS tx_join ORDER BY 2,3;
 xxx | i | j |   t   
-----+---+---+-------
     | 0 |   | zero
     | 1 | 4 | one
     | 2 | 3 | two
     | 3 | 2 | three
     | 4 | 1 | four
     | 5 | 0 | five
     | 6 | 6 | six
     | 7 | 7 | seven
     | 8 | 8 | eight
     |   | 0 | zero
     |   |   | null
(11 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL tx_join ORDER BY 2,3;
 xxx | i | j |   t   
-----+---+---+-------
     | 0 |   | zero
     | 1 | 4 | one
     | 2 | 3 | two
     | 3 | 2 | three
     | 4 | 1 | four
     | 5 | 0 | five
     | 6 | 6 | six
     | 7 | 7 | seven
     | 8 | 8 | eight
     |   | 0 | zero
     |   |   | null
(11 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL AS t1_join (a, b, c) ORDER BY 2,3;
 xxx | a | b |   c   
-----+---+---+-------
     | 0 |   | zero
     | 1 | 4 | one
     | 2 | 3 | two
     | 3 | 2 | three
     | 4 | 1 | four
     | 5 | 0 | five
     | 6 | 6 | six
     | 7 | 7 | seven
     | 8 | 8 | eight
     |   | 0 | zero
     |   |   | null
(11 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL t1_join (a, b, c) ORDER BY 2,3;
 xxx | a | b |   c   
-----+---+---+-------
     | 0 |   | zero
     | 1 | 4 | one
     | 2 | 3 | two
     | 3 | 2 | three
     | 4 | 1 | four
     | 5 | 0 | five
     | 6 | 6 | six
     | 7 | 7 | seven
     | 8 | 8 | eight
     |   | 0 | zero
     |   |   | null
(11 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL t1_join (a, b, c), J2_TBL t2_join (d, e) ORDER BY 2,3,4,5,6;
 xxx | a | b |   c   | d | e  
-----+---+---+-------+---+----
     | 0 |   | zero  | 0 |   
     | 0 |   | zero  | 1 | -1
     | 0 |   | zero  | 2 |  2
     | 0 |   | zero  | 2 |  4
     | 0 |   | zero  | 3 | -3
     | 0 |   | zero  | 5 | -5
     | 0 |   | zero  | 5 | -5
     | 0 |   | zero  |   |  0
     | 0 |   | zero  |   |   
     | 1 | 4 | one   | 0 |   
     | 1 | 4 | one   | 1 | -1
     | 1 | 4 | one   | 2 |  2
     | 1 | 4 | one   | 2 |  4
     | 1 | 4 | one   | 3 | -3
     | 1 | 4 | one   | 5 | -5
     | 1 | 4 | one   | 5 | -5
     | 1 | 4 | one   |   |  0
     | 1 | 4 | one   |   |   
     | 2 | 3 | two   | 0 |   
     | 2 | 3 | two   | 1 | -1
     | 2 | 3 | two   | 2 |  2
     | 2 | 3 | two   | 2 |  4
     | 2 | 3 | two   | 3 | -3
     | 2 | 3 | two   | 5 | -5
     | 2 | 3 | two   | 5 | -5
     | 2 | 3 | two   |   |  0
     | 2 | 3 | two   |   |   
     | 3 | 2 | three | 0 |   
     | 3 | 2 | three | 1 | -1
     | 3 | 2 | three | 2 |  2
     | 3 | 2 | three | 2 |  4
     | 3 | 2 | three | 3 | -3
     | 3 | 2 | three | 5 | -5
     | 3 | 2 | three | 5 | -5
     | 3 | 2 | three |   |  0
     | 3 | 2 | three |   |   
     | 4 | 1 | four  | 0 |   
     | 4 | 1 | four  | 1 | -1
     | 4 | 1 | four  | 2 |  2
     | 4 | 1 | four  | 2 |  4
     | 4 | 1 | four  | 3 | -3
     | 4 | 1 | four  | 5 | -5
     | 4 | 1 | four  | 5 | -5
     | 4 | 1 | four  |   |  0
     | 4 | 1 | four  |   |   
     | 5 | 0 | five  | 0 |   
     | 5 | 0 | five  | 1 | -1
     | 5 | 0 | five  | 2 |  2
     | 5 | 0 | five  | 2 |  4
     | 5 | 0 | five  | 3 | -3
     | 5 | 0 | five  | 5 | -5
     | 5 | 0 | five  | 5 | -5
     | 5 | 0 | five  |   |  0
     | 5 | 0 | five  |   |   
     | 6 | 6 | six   | 0 |   
     | 6 | 6 | six   | 1 | -1
     | 6 | 6 | six   | 2 |  2
     | 6 | 6 | six   | 2 |  4
     | 6 | 6 | six   | 3 | -3
     | 6 | 6 | six   | 5 | -5
     | 6 | 6 | six   | 5 | -5
     | 6 | 6 | six   |   |  0
     | 6 | 6 | six   |   |   
     | 7 | 7 | seven | 0 |   
     | 7 | 7 | seven | 1 | -1
     | 7 | 7 | seven | 2 |  2
     | 7 | 7 | seven | 2 |  4
     | 7 | 7 | seven | 3 | -3
     | 7 | 7 | seven | 5 | -5
     | 7 | 7 | seven | 5 | -5
     | 7 | 7 | seven |   |  0
     | 7 | 7 | seven |   |   
     | 8 | 8 | eight | 0 |   
     | 8 | 8 | eight | 1 | -1
     | 8 | 8 | eight | 2 |  2
     | 8 | 8 | eight | 2 |  4
     | 8 | 8 | eight | 3 | -3
     | 8 | 8 | eight | 5 | -5
     | 8 | 8 | eight | 5 | -5
     | 8 | 8 | eight |   |  0
     | 8 | 8 | eight |   |   
     |   | 0 | zero  | 0 |   
     |   | 0 | zero  | 1 | -1
     |   | 0 | zero  | 2 |  2
     |   | 0 | zero  | 2 |  4
     |   | 0 | zero  | 3 | -3
     |   | 0 | zero  | 5 | -5
     |   | 0 | zero  | 5 | -5
     |   | 0 | zero  |   |  0
     |   | 0 | zero  |   |   
     |   |   | null  | 0 |   
     |   |   | null  | 1 | -1
     |   |   | null  | 2 |  2
     |   |   | null  | 2 |  4
     |   |   | null  | 3 | -3
     |   |   | null  | 5 | -5
     |   |   | null  | 5 | -5
     |   |   | null  |   |  0
     |   |   | null  |   |   
(99 rows)

SELECT '' AS "xxx", t1_join.a, t2_join.e
  FROM J1_TBL t1_join (a, b, c), J2_TBL t2_join (d, e)
  WHERE t1_join.a = t2_join.d ORDER BY 2,3;
 xxx | a | e  
-----+---+----
     | 0 |   
     | 1 | -1
     | 2 |  2
     | 2 |  4
     | 3 | -3
     | 5 | -5
     | 5 | -5
(7 rows)

--
-- CROSS JOIN
-- Qualifications are not allowed on cross joins,
-- which degenerate into a standard unqualified inner join.
--
SELECT '' AS "xxx", *
  FROM J1_TBL CROSS JOIN J2_TBL ORDER BY 2,3,4,5,6;
 xxx | i | j |   t   | i | k  
-----+---+---+-------+---+----
     | 0 |   | zero  | 0 |   
     | 0 |   | zero  | 1 | -1
     | 0 |   | zero  | 2 |  2
     | 0 |   | zero  | 2 |  4
     | 0 |   | zero  | 3 | -3
     | 0 |   | zero  | 5 | -5
     | 0 |   | zero  | 5 | -5
     | 0 |   | zero  |   |  0
     | 0 |   | zero  |   |   
     | 1 | 4 | one   | 0 |   
     | 1 | 4 | one   | 1 | -1
     | 1 | 4 | one   | 2 |  2
     | 1 | 4 | one   | 2 |  4
     | 1 | 4 | one   | 3 | -3
     | 1 | 4 | one   | 5 | -5
     | 1 | 4 | one   | 5 | -5
     | 1 | 4 | one   |   |  0
     | 1 | 4 | one   |   |   
     | 2 | 3 | two   | 0 |   
     | 2 | 3 | two   | 1 | -1
     | 2 | 3 | two   | 2 |  2
     | 2 | 3 | two   | 2 |  4
     | 2 | 3 | two   | 3 | -3
     | 2 | 3 | two   | 5 | -5
     | 2 | 3 | two   | 5 | -5
     | 2 | 3 | two   |   |  0
     | 2 | 3 | two   |   |   
     | 3 | 2 | three | 0 |   
     | 3 | 2 | three | 1 | -1
     | 3 | 2 | three | 2 |  2
     | 3 | 2 | three | 2 |  4
     | 3 | 2 | three | 3 | -3
     | 3 | 2 | three | 5 | -5
     | 3 | 2 | three | 5 | -5
     | 3 | 2 | three |   |  0
     | 3 | 2 | three |   |   
     | 4 | 1 | four  | 0 |   
     | 4 | 1 | four  | 1 | -1
     | 4 | 1 | four  | 2 |  2
     | 4 | 1 | four  | 2 |  4
     | 4 | 1 | four  | 3 | -3
     | 4 | 1 | four  | 5 | -5
     | 4 | 1 | four  | 5 | -5
     | 4 | 1 | four  |   |  0
     | 4 | 1 | four  |   |   
     | 5 | 0 | five  | 0 |   
     | 5 | 0 | five  | 1 | -1
     | 5 | 0 | five  | 2 |  2
     | 5 | 0 | five  | 2 |  4
     | 5 | 0 | five  | 3 | -3
     | 5 | 0 | five  | 5 | -5
     | 5 | 0 | five  | 5 | -5
     | 5 | 0 | five  |   |  0
     | 5 | 0 | five  |   |   
     | 6 | 6 | six   | 0 |   
     | 6 | 6 | six   | 1 | -1
     | 6 | 6 | six   | 2 |  2
     | 6 | 6 | six   | 2 |  4
     | 6 | 6 | six   | 3 | -3
     | 6 | 6 | six   | 5 | -5
     | 6 | 6 | six   | 5 | -5
     | 6 | 6 | six   |   |  0
     | 6 | 6 | six   |   |   
     | 7 | 7 | seven | 0 |   
     | 7 | 7 | seven | 1 | -1
     | 7 | 7 | seven | 2 |  2
     | 7 | 7 | seven | 2 |  4
     | 7 | 7 | seven | 3 | -3
     | 7 | 7 | seven | 5 | -5
     | 7 | 7 | seven | 5 | -5
     | 7 | 7 | seven |   |  0
     | 7 | 7 | seven |   |   
     | 8 | 8 | eight | 0 |   
     | 8 | 8 | eight | 1 | -1
     | 8 | 8 | eight | 2 |  2
     | 8 | 8 | eight | 2 |  4
     | 8 | 8 | eight | 3 | -3
     | 8 | 8 | eight | 5 | -5
     | 8 | 8 | eight | 5 | -5
     | 8 | 8 | eight |   |  0
     | 8 | 8 | eight |   |   
     |   | 0 | zero  | 0 |   
     |   | 0 | zero  | 1 | -1
     |   | 0 | zero  | 2 |  2
     |   | 0 | zero  | 2 |  4
     |   | 0 | zero  | 3 | -3
     |   | 0 | zero  | 5 | -5
     |   | 0 | zero  | 5 | -5
     |   | 0 | zero  |   |  0
     |   | 0 | zero  |   |   
     |   |   | null  | 0 |   
     |   |   | null  | 1 | -1
     |   |   | null  | 2 |  2
     |   |   | null  | 2 |  4
     |   |   | null  | 3 | -3
     |   |   | null  | 5 | -5
     |   |   | null  | 5 | -5
     |   |   | null  |   |  0
     |   |   | null  |   |   
(99 rows)

-- ambiguous column
SELECT '' AS "xxx", i, k, t
  FROM J1_TBL CROSS JOIN J2_TBL ORDER BY 2,3,4;
ERROR:  column reference "i" is ambiguous
LINE 1: SELECT '' AS "xxx", i, k, t
                            ^
-- resolve previous ambiguity by specifying the table name
SELECT '' AS "xxx", t1_join.i, k, t
  FROM J1_TBL t1_join CROSS JOIN J2_TBL t2_join ORDER BY 2,3,4;
 xxx | i | k  |   t   
-----+---+----+-------
     | 0 | -5 | zero
     | 0 | -5 | zero
     | 0 | -3 | zero
     | 0 | -1 | zero
     | 0 |  0 | zero
     | 0 |  2 | zero
     | 0 |  4 | zero
     | 0 |    | zero
     | 0 |    | zero
     | 1 | -5 | one
     | 1 | -5 | one
     | 1 | -3 | one
     | 1 | -1 | one
     | 1 |  0 | one
     | 1 |  2 | one
     | 1 |  4 | one
     | 1 |    | one
     | 1 |    | one
     | 2 | -5 | two
     | 2 | -5 | two
     | 2 | -3 | two
     | 2 | -1 | two
     | 2 |  0 | two
     | 2 |  2 | two
     | 2 |  4 | two
     | 2 |    | two
     | 2 |    | two
     | 3 | -5 | three
     | 3 | -5 | three
     | 3 | -3 | three
     | 3 | -1 | three
     | 3 |  0 | three
     | 3 |  2 | three
     | 3 |  4 | three
     | 3 |    | three
     | 3 |    | three
     | 4 | -5 | four
     | 4 | -5 | four
     | 4 | -3 | four
     | 4 | -1 | four
     | 4 |  0 | four
     | 4 |  2 | four
     | 4 |  4 | four
     | 4 |    | four
     | 4 |    | four
     | 5 | -5 | five
     | 5 | -5 | five
     | 5 | -3 | five
     | 5 | -1 | five
     | 5 |  0 | five
     | 5 |  2 | five
     | 5 |  4 | five
     | 5 |    | five
     | 5 |    | five
     | 6 | -5 | six
     | 6 | -5 | six
     | 6 | -3 | six
     | 6 | -1 | six
     | 6 |  0 | six
     | 6 |  2 | six
     | 6 |  4 | six
     | 6 |    | six
     | 6 |    | six
     | 7 | -5 | seven
     | 7 | -5 | seven
     | 7 | -3 | seven
     | 7 | -1 | seven
     | 7 |  0 | seven
     | 7 |  2 | seven
     | 7 |  4 | seven
     | 7 |    | seven
     | 7 |    | seven
     | 8 | -5 | eight
     | 8 | -5 | eight
     | 8 | -3 | eight
     | 8 | -1 | eight
     | 8 |  0 | eight
     | 8 |  2 | eight
     | 8 |  4 | eight
     | 8 |    | eight
     | 8 |    | eight
     |   | -5 | null
     |   | -5 | null
     |   | -5 | zero
     |   | -5 | zero
     |   | -3 | null
     |   | -3 | zero
     |   | -1 | null
     |   | -1 | zero
     |   |  0 | null
     |   |  0 | zero
     |   |  2 | null
     |   |  2 | zero
     |   |  4 | null
     |   |  4 | zero
     |   |    | null
     |   |    | null
     |   |    | zero
     |   |    | zero
(99 rows)

SELECT '' AS "xxx", ii, tt, kk
  FROM (J1_TBL CROSS JOIN J2_TBL)
    AS tx_join (ii, jj, tt, ii2, kk) ORDER BY 2,3,4;
 xxx | ii |  tt   | kk 
-----+----+-------+----
     |  0 | zero  | -5
     |  0 | zero  | -5
     |  0 | zero  | -3
     |  0 | zero  | -1
     |  0 | zero  |  0
     |  0 | zero  |  2
     |  0 | zero  |  4
     |  0 | zero  |   
     |  0 | zero  |   
     |  1 | one   | -5
     |  1 | one   | -5
     |  1 | one   | -3
     |  1 | one   | -1
     |  1 | one   |  0
     |  1 | one   |  2
     |  1 | one   |  4
     |  1 | one   |   
     |  1 | one   |   
     |  2 | two   | -5
     |  2 | two   | -5
     |  2 | two   | -3
     |  2 | two   | -1
     |  2 | two   |  0
     |  2 | two   |  2
     |  2 | two   |  4
     |  2 | two   |   
     |  2 | two   |   
     |  3 | three | -5
     |  3 | three | -5
     |  3 | three | -3
     |  3 | three | -1
     |  3 | three |  0
     |  3 | three |  2
     |  3 | three |  4
     |  3 | three |   
     |  3 | three |   
     |  4 | four  | -5
     |  4 | four  | -5
     |  4 | four  | -3
     |  4 | four  | -1
     |  4 | four  |  0
     |  4 | four  |  2
     |  4 | four  |  4
     |  4 | four  |   
     |  4 | four  |   
     |  5 | five  | -5
     |  5 | five  | -5
     |  5 | five  | -3
     |  5 | five  | -1
     |  5 | five  |  0
     |  5 | five  |  2
     |  5 | five  |  4
     |  5 | five  |   
     |  5 | five  |   
     |  6 | six   | -5
     |  6 | six   | -5
     |  6 | six   | -3
     |  6 | six   | -1
     |  6 | six   |  0
     |  6 | six   |  2
     |  6 | six   |  4
     |  6 | six   |   
     |  6 | six   |   
     |  7 | seven | -5
     |  7 | seven | -5
     |  7 | seven | -3
     |  7 | seven | -1
     |  7 | seven |  0
     |  7 | seven |  2
     |  7 | seven |  4
     |  7 | seven |   
     |  7 | seven |   
     |  8 | eight | -5
     |  8 | eight | -5
     |  8 | eight | -3
     |  8 | eight | -1
     |  8 | eight |  0
     |  8 | eight |  2
     |  8 | eight |  4
     |  8 | eight |   
     |  8 | eight |   
     |    | null  | -5
     |    | null  | -5
     |    | null  | -3
     |    | null  | -1
     |    | null  |  0
     |    | null  |  2
     |    | null  |  4
     |    | null  |   
     |    | null  |   
     |    | zero  | -5
     |    | zero  | -5
     |    | zero  | -3
     |    | zero  | -1
     |    | zero  |  0
     |    | zero  |  2
     |    | zero  |  4
     |    | zero  |   
     |    | zero  |   
(99 rows)

SELECT '' AS "xxx", tx_join.ii, tx_join.jj, tx_join.kk
  FROM (J1_TBL t1_join (a, b, c) CROSS JOIN J2_TBL t2_join (d, e))
    AS tx_join (ii, jj, tt, ii2, kk) ORDER BY 2,3,4;
 xxx | ii | jj | kk 
-----+----+----+----
     |  0 |    | -5
     |  0 |    | -5
     |  0 |    | -3
     |  0 |    | -1
     |  0 |    |  0
     |  0 |    |  2
     |  0 |    |  4
     |  0 |    |   
     |  0 |    |   
     |  1 |  4 | -5
     |  1 |  4 | -5
     |  1 |  4 | -3
     |  1 |  4 | -1
     |  1 |  4 |  0
     |  1 |  4 |  2
     |  1 |  4 |  4
     |  1 |  4 |   
     |  1 |  4 |   
     |  2 |  3 | -5
     |  2 |  3 | -5
     |  2 |  3 | -3
     |  2 |  3 | -1
     |  2 |  3 |  0
     |  2 |  3 |  2
     |  2 |  3 |  4
     |  2 |  3 |   
     |  2 |  3 |   
     |  3 |  2 | -5
     |  3 |  2 | -5
     |  3 |  2 | -3
     |  3 |  2 | -1
     |  3 |  2 |  0
     |  3 |  2 |  2
     |  3 |  2 |  4
     |  3 |  2 |   
     |  3 |  2 |   
     |  4 |  1 | -5
     |  4 |  1 | -5
     |  4 |  1 | -3
     |  4 |  1 | -1
     |  4 |  1 |  0
     |  4 |  1 |  2
     |  4 |  1 |  4
     |  4 |  1 |   
     |  4 |  1 |   
     |  5 |  0 | -5
     |  5 |  0 | -5
     |  5 |  0 | -3
     |  5 |  0 | -1
     |  5 |  0 |  0
     |  5 |  0 |  2
     |  5 |  0 |  4
     |  5 |  0 |   
     |  5 |  0 |   
     |  6 |  6 | -5
     |  6 |  6 | -5
     |  6 |  6 | -3
     |  6 |  6 | -1
     |  6 |  6 |  0
     |  6 |  6 |  2
     |  6 |  6 |  4
     |  6 |  6 |   
     |  6 |  6 |   
     |  7 |  7 | -5
     |  7 |  7 | -5
     |  7 |  7 | -3
     |  7 |  7 | -1
     |  7 |  7 |  0
     |  7 |  7 |  2
     |  7 |  7 |  4
     |  7 |  7 |   
     |  7 |  7 |   
     |  8 |  8 | -5
     |  8 |  8 | -5
     |  8 |  8 | -3
     |  8 |  8 | -1
     |  8 |  8 |  0
     |  8 |  8 |  2
     |  8 |  8 |  4
     |  8 |  8 |   
     |  8 |  8 |   
     |    |  0 | -5
     |    |  0 | -5
     |    |  0 | -3
     |    |  0 | -1
     |    |  0 |  0
     |    |  0 |  2
     |    |  0 |  4
     |    |  0 |   
     |    |  0 |   
     |    |    | -5
     |    |    | -5
     |    |    | -3
     |    |    | -1
     |    |    |  0
     |    |    |  2
     |    |    |  4
     |    |    |   
     |    |    |   
(99 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL CROSS JOIN J2_TBL a CROSS JOIN J2_TBL b ORDER BY 2,3,4,5,6,7,8;
 xxx | i | j |   t   | i | k  | i | k  
-----+---+---+-------+---+----+---+----
     | 0 |   | zero  | 0 |    | 0 |   
     | 0 |   | zero  | 0 |    | 1 | -1
     | 0 |   | zero  | 0 |    | 2 |  2
     | 0 |   | zero  | 0 |    | 2 |  4
     | 0 |   | zero  | 0 |    | 3 | -3
     | 0 |   | zero  | 0 |    | 5 | -5
     | 0 |   | zero  | 0 |    | 5 | -5
     | 0 |   | zero  | 0 |    |   |  0
     | 0 |   | zero  | 0 |    |   |   
     | 0 |   | zero  | 1 | -1 | 0 |   
     | 0 |   | zero  | 1 | -1 | 1 | -1
     | 0 |   | zero  | 1 | -1 | 2 |  2
     | 0 |   | zero  | 1 | -1 | 2 |  4
     | 0 |   | zero  | 1 | -1 | 3 | -3
     | 0 |   | zero  | 1 | -1 | 5 | -5
     | 0 |   | zero  | 1 | -1 | 5 | -5
     | 0 |   | zero  | 1 | -1 |   |  0
     | 0 |   | zero  | 1 | -1 |   |   
     | 0 |   | zero  | 2 |  2 | 0 |   
     | 0 |   | zero  | 2 |  2 | 1 | -1
     | 0 |   | zero  | 2 |  2 | 2 |  2
     | 0 |   | zero  | 2 |  2 | 2 |  4
     | 0 |   | zero  | 2 |  2 | 3 | -3
     | 0 |   | zero  | 2 |  2 | 5 | -5
     | 0 |   | zero  | 2 |  2 | 5 | -5
     | 0 |   | zero  | 2 |  2 |   |  0
     | 0 |   | zero  | 2 |  2 |   |   
     | 0 |   | zero  | 2 |  4 | 0 |   
     | 0 |   | zero  | 2 |  4 | 1 | -1
     | 0 |   | zero  | 2 |  4 | 2 |  2
     | 0 |   | zero  | 2 |  4 | 2 |  4
     | 0 |   | zero  | 2 |  4 | 3 | -3
     | 0 |   | zero  | 2 |  4 | 5 | -5
     | 0 |   | zero  | 2 |  4 | 5 | -5
     | 0 |   | zero  | 2 |  4 |   |  0
     | 0 |   | zero  | 2 |  4 |   |   
     | 0 |   | zero  | 3 | -3 | 0 |   
     | 0 |   | zero  | 3 | -3 | 1 | -1
     | 0 |   | zero  | 3 | -3 | 2 |  2
     | 0 |   | zero  | 3 | -3 | 2 |  4
     | 0 |   | zero  | 3 | -3 | 3 | -3
     | 0 |   | zero  | 3 | -3 | 5 | -5
     | 0 |   | zero  | 3 | -3 | 5 | -5
     | 0 |   | zero  | 3 | -3 |   |  0
     | 0 |   | zero  | 3 | -3 |   |   
     | 0 |   | zero  | 5 | -5 | 0 |   
     | 0 |   | zero  | 5 | -5 | 0 |   
     | 0 |   | zero  | 5 | -5 | 1 | -1
     | 0 |   | zero  | 5 | -5 | 1 | -1
     | 0 |   | zero  | 5 | -5 | 2 |  2
     | 0 |   | zero  | 5 | -5 | 2 |  2
     | 0 |   | zero  | 5 | -5 | 2 |  4
     | 0 |   | zero  | 5 | -5 | 2 |  4
     | 0 |   | zero  | 5 | -5 | 3 | -3
     | 0 |   | zero  | 5 | -5 | 3 | -3
     | 0 |   | zero  | 5 | -5 | 5 | -5
     | 0 |   | zero  | 5 | -5 | 5 | -5
     | 0 |   | zero  | 5 | -5 | 5 | -5
     | 0 |   | zero  | 5 | -5 | 5 | -5
     | 0 |   | zero  | 5 | -5 |   |  0
     | 0 |   | zero  | 5 | -5 |   |  0
     | 0 |   | zero  | 5 | -5 |   |   
     | 0 |   | zero  | 5 | -5 |   |   
     | 0 |   | zero  |   |  0 | 0 |   
     | 0 |   | zero  |   |  0 | 1 | -1
     | 0 |   | zero  |   |  0 | 2 |  2
     | 0 |   | zero  |   |  0 | 2 |  4
     | 0 |   | zero  |   |  0 | 3 | -3
     | 0 |   | zero  |   |  0 | 5 | -5
     | 0 |   | zero  |   |  0 | 5 | -5
     | 0 |   | zero  |   |  0 |   |  0
     | 0 |   | zero  |   |  0 |   |   
     | 0 |   | zero  |   |    | 0 |   
     | 0 |   | zero  |   |    | 1 | -1
     | 0 |   | zero  |   |    | 2 |  2
     | 0 |   | zero  |   |    | 2 |  4
     | 0 |   | zero  |   |    | 3 | -3
     | 0 |   | zero  |   |    | 5 | -5
     | 0 |   | zero  |   |    | 5 | -5
     | 0 |   | zero  |   |    |   |  0
     | 0 |   | zero  |   |    |   |   
     | 1 | 4 | one   | 0 |    | 0 |   
     | 1 | 4 | one   | 0 |    | 1 | -1
     | 1 | 4 | one   | 0 |    | 2 |  2
     | 1 | 4 | one   | 0 |    | 2 |  4
     | 1 | 4 | one   | 0 |    | 3 | -3
     | 1 | 4 | one   | 0 |    | 5 | -5
     | 1 | 4 | one   | 0 |    | 5 | -5
     | 1 | 4 | one   | 0 |    |   |  0
     | 1 | 4 | one   | 0 |    |   |   
     | 1 | 4 | one   | 1 | -1 | 0 |   
     | 1 | 4 | one   | 1 | -1 | 1 | -1
     | 1 | 4 | one   | 1 | -1 | 2 |  2
     | 1 | 4 | one   | 1 | -1 | 2 |  4
     | 1 | 4 | one   | 1 | -1 | 3 | -3
     | 1 | 4 | one   | 1 | -1 | 5 | -5
     | 1 | 4 | one   | 1 | -1 | 5 | -5
     | 1 | 4 | one   | 1 | -1 |   |  0
     | 1 | 4 | one   | 1 | -1 |   |   
     | 1 | 4 | one   | 2 |  2 | 0 |   
     | 1 | 4 | one   | 2 |  2 | 1 | -1
     | 1 | 4 | one   | 2 |  2 | 2 |  2
     | 1 | 4 | one   | 2 |  2 | 2 |  4
     | 1 | 4 | one   | 2 |  2 | 3 | -3
     | 1 | 4 | one   | 2 |  2 | 5 | -5
     | 1 | 4 | one   | 2 |  2 | 5 | -5
     | 1 | 4 | one   | 2 |  2 |   |  0
     | 1 | 4 | one   | 2 |  2 |   |   
     | 1 | 4 | one   | 2 |  4 | 0 |   
     | 1 | 4 | one   | 2 |  4 | 1 | -1
     | 1 | 4 | one   | 2 |  4 | 2 |  2
     | 1 | 4 | one   | 2 |  4 | 2 |  4
     | 1 | 4 | one   | 2 |  4 | 3 | -3
     | 1 | 4 | one   | 2 |  4 | 5 | -5
     | 1 | 4 | one   | 2 |  4 | 5 | -5
     | 1 | 4 | one   | 2 |  4 |   |  0
     | 1 | 4 | one   | 2 |  4 |   |   
     | 1 | 4 | one   | 3 | -3 | 0 |   
     | 1 | 4 | one   | 3 | -3 | 1 | -1
     | 1 | 4 | one   | 3 | -3 | 2 |  2
     | 1 | 4 | one   | 3 | -3 | 2 |  4
     | 1 | 4 | one   | 3 | -3 | 3 | -3
     | 1 | 4 | one   | 3 | -3 | 5 | -5
     | 1 | 4 | one   | 3 | -3 | 5 | -5
     | 1 | 4 | one   | 3 | -3 |   |  0
     | 1 | 4 | one   | 3 | -3 |   |   
     | 1 | 4 | one   | 5 | -5 | 0 |   
     | 1 | 4 | one   | 5 | -5 | 0 |   
     | 1 | 4 | one   | 5 | -5 | 1 | -1
     | 1 | 4 | one   | 5 | -5 | 1 | -1
     | 1 | 4 | one   | 5 | -5 | 2 |  2
     | 1 | 4 | one   | 5 | -5 | 2 |  2
     | 1 | 4 | one   | 5 | -5 | 2 |  4
     | 1 | 4 | one   | 5 | -5 | 2 |  4
     | 1 | 4 | one   | 5 | -5 | 3 | -3
     | 1 | 4 | one   | 5 | -5 | 3 | -3
     | 1 | 4 | one   | 5 | -5 | 5 | -5
     | 1 | 4 | one   | 5 | -5 | 5 | -5
     | 1 | 4 | one   | 5 | -5 | 5 | -5
     | 1 | 4 | one   | 5 | -5 | 5 | -5
     | 1 | 4 | one   | 5 | -5 |   |  0
     | 1 | 4 | one   | 5 | -5 |   |  0
     | 1 | 4 | one   | 5 | -5 |   |   
     | 1 | 4 | one   | 5 | -5 |   |   
     | 1 | 4 | one   |   |  0 | 0 |   
     | 1 | 4 | one   |   |  0 | 1 | -1
     | 1 | 4 | one   |   |  0 | 2 |  2
     | 1 | 4 | one   |   |  0 | 2 |  4
     | 1 | 4 | one   |   |  0 | 3 | -3
     | 1 | 4 | one   |   |  0 | 5 | -5
     | 1 | 4 | one   |   |  0 | 5 | -5
     | 1 | 4 | one   |   |  0 |   |  0
     | 1 | 4 | one   |   |  0 |   |   
     | 1 | 4 | one   |   |    | 0 |   
     | 1 | 4 | one   |   |    | 1 | -1
     | 1 | 4 | one   |   |    | 2 |  2
     | 1 | 4 | one   |   |    | 2 |  4
     | 1 | 4 | one   |   |    | 3 | -3
     | 1 | 4 | one   |   |    | 5 | -5
     | 1 | 4 | one   |   |    | 5 | -5
     | 1 | 4 | one   |   |    |   |  0
     | 1 | 4 | one   |   |    |   |   
     | 2 | 3 | two   | 0 |    | 0 |   
     | 2 | 3 | two   | 0 |    | 1 | -1
     | 2 | 3 | two   | 0 |    | 2 |  2
     | 2 | 3 | two   | 0 |    | 2 |  4
     | 2 | 3 | two   | 0 |    | 3 | -3
     | 2 | 3 | two   | 0 |    | 5 | -5
     | 2 | 3 | two   | 0 |    | 5 | -5
     | 2 | 3 | two   | 0 |    |   |  0
     | 2 | 3 | two   | 0 |    |   |   
     | 2 | 3 | two   | 1 | -1 | 0 |   
     | 2 | 3 | two   | 1 | -1 | 1 | -1
     | 2 | 3 | two   | 1 | -1 | 2 |  2
     | 2 | 3 | two   | 1 | -1 | 2 |  4
     | 2 | 3 | two   | 1 | -1 | 3 | -3
     | 2 | 3 | two   | 1 | -1 | 5 | -5
     | 2 | 3 | two   | 1 | -1 | 5 | -5
     | 2 | 3 | two   | 1 | -1 |   |  0
     | 2 | 3 | two   | 1 | -1 |   |   
     | 2 | 3 | two   | 2 |  2 | 0 |   
     | 2 | 3 | two   | 2 |  2 | 1 | -1
     | 2 | 3 | two   | 2 |  2 | 2 |  2
     | 2 | 3 | two   | 2 |  2 | 2 |  4
     | 2 | 3 | two   | 2 |  2 | 3 | -3
     | 2 | 3 | two   | 2 |  2 | 5 | -5
     | 2 | 3 | two   | 2 |  2 | 5 | -5
     | 2 | 3 | two   | 2 |  2 |   |  0
     | 2 | 3 | two   | 2 |  2 |   |   
     | 2 | 3 | two   | 2 |  4 | 0 |   
     | 2 | 3 | two   | 2 |  4 | 1 | -1
     | 2 | 3 | two   | 2 |  4 | 2 |  2
     | 2 | 3 | two   | 2 |  4 | 2 |  4
     | 2 | 3 | two   | 2 |  4 | 3 | -3
     | 2 | 3 | two   | 2 |  4 | 5 | -5
     | 2 | 3 | two   | 2 |  4 | 5 | -5
     | 2 | 3 | two   | 2 |  4 |   |  0
     | 2 | 3 | two   | 2 |  4 |   |   
     | 2 | 3 | two   | 3 | -3 | 0 |   
     | 2 | 3 | two   | 3 | -3 | 1 | -1
     | 2 | 3 | two   | 3 | -3 | 2 |  2
     | 2 | 3 | two   | 3 | -3 | 2 |  4
     | 2 | 3 | two   | 3 | -3 | 3 | -3
     | 2 | 3 | two   | 3 | -3 | 5 | -5
     | 2 | 3 | two   | 3 | -3 | 5 | -5
     | 2 | 3 | two   | 3 | -3 |   |  0
     | 2 | 3 | two   | 3 | -3 |   |   
     | 2 | 3 | two   | 5 | -5 | 0 |   
     | 2 | 3 | two   | 5 | -5 | 0 |   
     | 2 | 3 | two   | 5 | -5 | 1 | -1
     | 2 | 3 | two   | 5 | -5 | 1 | -1
     | 2 | 3 | two   | 5 | -5 | 2 |  2
     | 2 | 3 | two   | 5 | -5 | 2 |  2
     | 2 | 3 | two   | 5 | -5 | 2 |  4
     | 2 | 3 | two   | 5 | -5 | 2 |  4
     | 2 | 3 | two   | 5 | -5 | 3 | -3
     | 2 | 3 | two   | 5 | -5 | 3 | -3
     | 2 | 3 | two   | 5 | -5 | 5 | -5
     | 2 | 3 | two   | 5 | -5 | 5 | -5
     | 2 | 3 | two   | 5 | -5 | 5 | -5
     | 2 | 3 | two   | 5 | -5 | 5 | -5
     | 2 | 3 | two   | 5 | -5 |   |  0
     | 2 | 3 | two   | 5 | -5 |   |  0
     | 2 | 3 | two   | 5 | -5 |   |   
     | 2 | 3 | two   | 5 | -5 |   |   
     | 2 | 3 | two   |   |  0 | 0 |   
     | 2 | 3 | two   |   |  0 | 1 | -1
     | 2 | 3 | two   |   |  0 | 2 |  2
     | 2 | 3 | two   |   |  0 | 2 |  4
     | 2 | 3 | two   |   |  0 | 3 | -3
     | 2 | 3 | two   |   |  0 | 5 | -5
     | 2 | 3 | two   |   |  0 | 5 | -5
     | 2 | 3 | two   |   |  0 |   |  0
     | 2 | 3 | two   |   |  0 |   |   
     | 2 | 3 | two   |   |    | 0 |   
     | 2 | 3 | two   |   |    | 1 | -1
     | 2 | 3 | two   |   |    | 2 |  2
     | 2 | 3 | two   |   |    | 2 |  4
     | 2 | 3 | two   |   |    | 3 | -3
     | 2 | 3 | two   |   |    | 5 | -5
     | 2 | 3 | two   |   |    | 5 | -5
     | 2 | 3 | two   |   |    |   |  0
     | 2 | 3 | two   |   |    |   |   
     | 3 | 2 | three | 0 |    | 0 |   
     | 3 | 2 | three | 0 |    | 1 | -1
     | 3 | 2 | three | 0 |    | 2 |  2
     | 3 | 2 | three | 0 |    | 2 |  4
     | 3 | 2 | three | 0 |    | 3 | -3
     | 3 | 2 | three | 0 |    | 5 | -5
     | 3 | 2 | three | 0 |    | 5 | -5
     | 3 | 2 | three | 0 |    |   |  0
     | 3 | 2 | three | 0 |    |   |   
     | 3 | 2 | three | 1 | -1 | 0 |   
     | 3 | 2 | three | 1 | -1 | 1 | -1
     | 3 | 2 | three | 1 | -1 | 2 |  2
     | 3 | 2 | three | 1 | -1 | 2 |  4
     | 3 | 2 | three | 1 | -1 | 3 | -3
     | 3 | 2 | three | 1 | -1 | 5 | -5
     | 3 | 2 | three | 1 | -1 | 5 | -5
     | 3 | 2 | three | 1 | -1 |   |  0
     | 3 | 2 | three | 1 | -1 |   |   
     | 3 | 2 | three | 2 |  2 | 0 |   
     | 3 | 2 | three | 2 |  2 | 1 | -1
     | 3 | 2 | three | 2 |  2 | 2 |  2
     | 3 | 2 | three | 2 |  2 | 2 |  4
     | 3 | 2 | three | 2 |  2 | 3 | -3
     | 3 | 2 | three | 2 |  2 | 5 | -5
     | 3 | 2 | three | 2 |  2 | 5 | -5
     | 3 | 2 | three | 2 |  2 |   |  0
     | 3 | 2 | three | 2 |  2 |   |   
     | 3 | 2 | three | 2 |  4 | 0 |   
     | 3 | 2 | three | 2 |  4 | 1 | -1
     | 3 | 2 | three | 2 |  4 | 2 |  2
     | 3 | 2 | three | 2 |  4 | 2 |  4
     | 3 | 2 | three | 2 |  4 | 3 | -3
     | 3 | 2 | three | 2 |  4 | 5 | -5
     | 3 | 2 | three | 2 |  4 | 5 | -5
     | 3 | 2 | three | 2 |  4 |   |  0
     | 3 | 2 | three | 2 |  4 |   |   
     | 3 | 2 | three | 3 | -3 | 0 |   
     | 3 | 2 | three | 3 | -3 | 1 | -1
     | 3 | 2 | three | 3 | -3 | 2 |  2
     | 3 | 2 | three | 3 | -3 | 2 |  4
     | 3 | 2 | three | 3 | -3 | 3 | -3
     | 3 | 2 | three | 3 | -3 | 5 | -5
     | 3 | 2 | three | 3 | -3 | 5 | -5
     | 3 | 2 | three | 3 | -3 |   |  0
     | 3 | 2 | three | 3 | -3 |   |   
     | 3 | 2 | three | 5 | -5 | 0 |   
     | 3 | 2 | three | 5 | -5 | 0 |   
     | 3 | 2 | three | 5 | -5 | 1 | -1
     | 3 | 2 | three | 5 | -5 | 1 | -1
     | 3 | 2 | three | 5 | -5 | 2 |  2
     | 3 | 2 | three | 5 | -5 | 2 |  2
     | 3 | 2 | three | 5 | -5 | 2 |  4
     | 3 | 2 | three | 5 | -5 | 2 |  4
     | 3 | 2 | three | 5 | -5 | 3 | -3
     | 3 | 2 | three | 5 | -5 | 3 | -3
     | 3 | 2 | three | 5 | -5 | 5 | -5
     | 3 | 2 | three | 5 | -5 | 5 | -5
     | 3 | 2 | three | 5 | -5 | 5 | -5
     | 3 | 2 | three | 5 | -5 | 5 | -5
     | 3 | 2 | three | 5 | -5 |   |  0
     | 3 | 2 | three | 5 | -5 |   |  0
     | 3 | 2 | three | 5 | -5 |   |   
     | 3 | 2 | three | 5 | -5 |   |   
     | 3 | 2 | three |   |  0 | 0 |   
     | 3 | 2 | three |   |  0 | 1 | -1
     | 3 | 2 | three |   |  0 | 2 |  2
     | 3 | 2 | three |   |  0 | 2 |  4
     | 3 | 2 | three |   |  0 | 3 | -3
     | 3 | 2 | three |   |  0 | 5 | -5
     | 3 | 2 | three |   |  0 | 5 | -5
     | 3 | 2 | three |   |  0 |   |  0
     | 3 | 2 | three |   |  0 |   |   
     | 3 | 2 | three |   |    | 0 |   
     | 3 | 2 | three |   |    | 1 | -1
     | 3 | 2 | three |   |    | 2 |  2
     | 3 | 2 | three |   |    | 2 |  4
     | 3 | 2 | three |   |    | 3 | -3
     | 3 | 2 | three |   |    | 5 | -5
     | 3 | 2 | three |   |    | 5 | -5
     | 3 | 2 | three |   |    |   |  0
     | 3 | 2 | three |   |    |   |   
     | 4 | 1 | four  | 0 |    | 0 |   
     | 4 | 1 | four  | 0 |    | 1 | -1
     | 4 | 1 | four  | 0 |    | 2 |  2
     | 4 | 1 | four  | 0 |    | 2 |  4
     | 4 | 1 | four  | 0 |    | 3 | -3
     | 4 | 1 | four  | 0 |    | 5 | -5
     | 4 | 1 | four  | 0 |    | 5 | -5
     | 4 | 1 | four  | 0 |    |   |  0
     | 4 | 1 | four  | 0 |    |   |   
     | 4 | 1 | four  | 1 | -1 | 0 |   
     | 4 | 1 | four  | 1 | -1 | 1 | -1
     | 4 | 1 | four  | 1 | -1 | 2 |  2
     | 4 | 1 | four  | 1 | -1 | 2 |  4
     | 4 | 1 | four  | 1 | -1 | 3 | -3
     | 4 | 1 | four  | 1 | -1 | 5 | -5
     | 4 | 1 | four  | 1 | -1 | 5 | -5
     | 4 | 1 | four  | 1 | -1 |   |  0
     | 4 | 1 | four  | 1 | -1 |   |   
     | 4 | 1 | four  | 2 |  2 | 0 |   
     | 4 | 1 | four  | 2 |  2 | 1 | -1
     | 4 | 1 | four  | 2 |  2 | 2 |  2
     | 4 | 1 | four  | 2 |  2 | 2 |  4
     | 4 | 1 | four  | 2 |  2 | 3 | -3
     | 4 | 1 | four  | 2 |  2 | 5 | -5
     | 4 | 1 | four  | 2 |  2 | 5 | -5
     | 4 | 1 | four  | 2 |  2 |   |  0
     | 4 | 1 | four  | 2 |  2 |   |   
     | 4 | 1 | four  | 2 |  4 | 0 |   
     | 4 | 1 | four  | 2 |  4 | 1 | -1
     | 4 | 1 | four  | 2 |  4 | 2 |  2
     | 4 | 1 | four  | 2 |  4 | 2 |  4
     | 4 | 1 | four  | 2 |  4 | 3 | -3
     | 4 | 1 | four  | 2 |  4 | 5 | -5
     | 4 | 1 | four  | 2 |  4 | 5 | -5
     | 4 | 1 | four  | 2 |  4 |   |  0
     | 4 | 1 | four  | 2 |  4 |   |   
     | 4 | 1 | four  | 3 | -3 | 0 |   
     | 4 | 1 | four  | 3 | -3 | 1 | -1
     | 4 | 1 | four  | 3 | -3 | 2 |  2
     | 4 | 1 | four  | 3 | -3 | 2 |  4
     | 4 | 1 | four  | 3 | -3 | 3 | -3
     | 4 | 1 | four  | 3 | -3 | 5 | -5
     | 4 | 1 | four  | 3 | -3 | 5 | -5
     | 4 | 1 | four  | 3 | -3 |   |  0
     | 4 | 1 | four  | 3 | -3 |   |   
     | 4 | 1 | four  | 5 | -5 | 0 |   
     | 4 | 1 | four  | 5 | -5 | 0 |   
     | 4 | 1 | four  | 5 | -5 | 1 | -1
     | 4 | 1 | four  | 5 | -5 | 1 | -1
     | 4 | 1 | four  | 5 | -5 | 2 |  2
     | 4 | 1 | four  | 5 | -5 | 2 |  2
     | 4 | 1 | four  | 5 | -5 | 2 |  4
     | 4 | 1 | four  | 5 | -5 | 2 |  4
     | 4 | 1 | four  | 5 | -5 | 3 | -3
     | 4 | 1 | four  | 5 | -5 | 3 | -3
     | 4 | 1 | four  | 5 | -5 | 5 | -5
     | 4 | 1 | four  | 5 | -5 | 5 | -5
     | 4 | 1 | four  | 5 | -5 | 5 | -5
     | 4 | 1 | four  | 5 | -5 | 5 | -5
     | 4 | 1 | four  | 5 | -5 |   |  0
     | 4 | 1 | four  | 5 | -5 |   |  0
     | 4 | 1 | four  | 5 | -5 |   |   
     | 4 | 1 | four  | 5 | -5 |   |   
     | 4 | 1 | four  |   |  0 | 0 |   
     | 4 | 1 | four  |   |  0 | 1 | -1
     | 4 | 1 | four  |   |  0 | 2 |  2
     | 4 | 1 | four  |   |  0 | 2 |  4
     | 4 | 1 | four  |   |  0 | 3 | -3
     | 4 | 1 | four  |   |  0 | 5 | -5
     | 4 | 1 | four  |   |  0 | 5 | -5
     | 4 | 1 | four  |   |  0 |   |  0
     | 4 | 1 | four  |   |  0 |   |   
     | 4 | 1 | four  |   |    | 0 |   
     | 4 | 1 | four  |   |    | 1 | -1
     | 4 | 1 | four  |   |    | 2 |  2
     | 4 | 1 | four  |   |    | 2 |  4
     | 4 | 1 | four  |   |    | 3 | -3
     | 4 | 1 | four  |   |    | 5 | -5
     | 4 | 1 | four  |   |    | 5 | -5
     | 4 | 1 | four  |   |    |   |  0
     | 4 | 1 | four  |   |    |   |   
     | 5 | 0 | five  | 0 |    | 0 |   
     | 5 | 0 | five  | 0 |    | 1 | -1
     | 5 | 0 | five  | 0 |    | 2 |  2
     | 5 | 0 | five  | 0 |    | 2 |  4
     | 5 | 0 | five  | 0 |    | 3 | -3
     | 5 | 0 | five  | 0 |    | 5 | -5
     | 5 | 0 | five  | 0 |    | 5 | -5
     | 5 | 0 | five  | 0 |    |   |  0
     | 5 | 0 | five  | 0 |    |   |   
     | 5 | 0 | five  | 1 | -1 | 0 |   
     | 5 | 0 | five  | 1 | -1 | 1 | -1
     | 5 | 0 | five  | 1 | -1 | 2 |  2
     | 5 | 0 | five  | 1 | -1 | 2 |  4
     | 5 | 0 | five  | 1 | -1 | 3 | -3
     | 5 | 0 | five  | 1 | -1 | 5 | -5
     | 5 | 0 | five  | 1 | -1 | 5 | -5
     | 5 | 0 | five  | 1 | -1 |   |  0
     | 5 | 0 | five  | 1 | -1 |   |   
     | 5 | 0 | five  | 2 |  2 | 0 |   
     | 5 | 0 | five  | 2 |  2 | 1 | -1
     | 5 | 0 | five  | 2 |  2 | 2 |  2
     | 5 | 0 | five  | 2 |  2 | 2 |  4
     | 5 | 0 | five  | 2 |  2 | 3 | -3
     | 5 | 0 | five  | 2 |  2 | 5 | -5
     | 5 | 0 | five  | 2 |  2 | 5 | -5
     | 5 | 0 | five  | 2 |  2 |   |  0
     | 5 | 0 | five  | 2 |  2 |   |   
     | 5 | 0 | five  | 2 |  4 | 0 |   
     | 5 | 0 | five  | 2 |  4 | 1 | -1
     | 5 | 0 | five  | 2 |  4 | 2 |  2
     | 5 | 0 | five  | 2 |  4 | 2 |  4
     | 5 | 0 | five  | 2 |  4 | 3 | -3
     | 5 | 0 | five  | 2 |  4 | 5 | -5
     | 5 | 0 | five  | 2 |  4 | 5 | -5
     | 5 | 0 | five  | 2 |  4 |   |  0
     | 5 | 0 | five  | 2 |  4 |   |   
     | 5 | 0 | five  | 3 | -3 | 0 |   
     | 5 | 0 | five  | 3 | -3 | 1 | -1
     | 5 | 0 | five  | 3 | -3 | 2 |  2
     | 5 | 0 | five  | 3 | -3 | 2 |  4
     | 5 | 0 | five  | 3 | -3 | 3 | -3
     | 5 | 0 | five  | 3 | -3 | 5 | -5
     | 5 | 0 | five  | 3 | -3 | 5 | -5
     | 5 | 0 | five  | 3 | -3 |   |  0
     | 5 | 0 | five  | 3 | -3 |   |   
     | 5 | 0 | five  | 5 | -5 | 0 |   
     | 5 | 0 | five  | 5 | -5 | 0 |   
     | 5 | 0 | five  | 5 | -5 | 1 | -1
     | 5 | 0 | five  | 5 | -5 | 1 | -1
     | 5 | 0 | five  | 5 | -5 | 2 |  2
     | 5 | 0 | five  | 5 | -5 | 2 |  2
     | 5 | 0 | five  | 5 | -5 | 2 |  4
     | 5 | 0 | five  | 5 | -5 | 2 |  4
     | 5 | 0 | five  | 5 | -5 | 3 | -3
     | 5 | 0 | five  | 5 | -5 | 3 | -3
     | 5 | 0 | five  | 5 | -5 | 5 | -5
     | 5 | 0 | five  | 5 | -5 | 5 | -5
     | 5 | 0 | five  | 5 | -5 | 5 | -5
     | 5 | 0 | five  | 5 | -5 | 5 | -5
     | 5 | 0 | five  | 5 | -5 |   |  0
     | 5 | 0 | five  | 5 | -5 |   |  0
     | 5 | 0 | five  | 5 | -5 |   |   
     | 5 | 0 | five  | 5 | -5 |   |   
     | 5 | 0 | five  |   |  0 | 0 |   
     | 5 | 0 | five  |   |  0 | 1 | -1
     | 5 | 0 | five  |   |  0 | 2 |  2
     | 5 | 0 | five  |   |  0 | 2 |  4
     | 5 | 0 | five  |   |  0 | 3 | -3
     | 5 | 0 | five  |   |  0 | 5 | -5
     | 5 | 0 | five  |   |  0 | 5 | -5
     | 5 | 0 | five  |   |  0 |   |  0
     | 5 | 0 | five  |   |  0 |   |   
     | 5 | 0 | five  |   |    | 0 |   
     | 5 | 0 | five  |   |    | 1 | -1
     | 5 | 0 | five  |   |    | 2 |  2
     | 5 | 0 | five  |   |    | 2 |  4
     | 5 | 0 | five  |   |    | 3 | -3
     | 5 | 0 | five  |   |    | 5 | -5
     | 5 | 0 | five  |   |    | 5 | -5
     | 5 | 0 | five  |   |    |   |  0
     | 5 | 0 | five  |   |    |   |   
     | 6 | 6 | six   | 0 |    | 0 |   
     | 6 | 6 | six   | 0 |    | 1 | -1
     | 6 | 6 | six   | 0 |    | 2 |  2
     | 6 | 6 | six   | 0 |    | 2 |  4
     | 6 | 6 | six   | 0 |    | 3 | -3
     | 6 | 6 | six   | 0 |    | 5 | -5
     | 6 | 6 | six   | 0 |    | 5 | -5
     | 6 | 6 | six   | 0 |    |   |  0
     | 6 | 6 | six   | 0 |    |   |   
     | 6 | 6 | six   | 1 | -1 | 0 |   
     | 6 | 6 | six   | 1 | -1 | 1 | -1
     | 6 | 6 | six   | 1 | -1 | 2 |  2
     | 6 | 6 | six   | 1 | -1 | 2 |  4
     | 6 | 6 | six   | 1 | -1 | 3 | -3
     | 6 | 6 | six   | 1 | -1 | 5 | -5
     | 6 | 6 | six   | 1 | -1 | 5 | -5
     | 6 | 6 | six   | 1 | -1 |   |  0
     | 6 | 6 | six   | 1 | -1 |   |   
     | 6 | 6 | six   | 2 |  2 | 0 |   
     | 6 | 6 | six   | 2 |  2 | 1 | -1
     | 6 | 6 | six   | 2 |  2 | 2 |  2
     | 6 | 6 | six   | 2 |  2 | 2 |  4
     | 6 | 6 | six   | 2 |  2 | 3 | -3
     | 6 | 6 | six   | 2 |  2 | 5 | -5
     | 6 | 6 | six   | 2 |  2 | 5 | -5
     | 6 | 6 | six   | 2 |  2 |   |  0
     | 6 | 6 | six   | 2 |  2 |   |   
     | 6 | 6 | six   | 2 |  4 | 0 |   
     | 6 | 6 | six   | 2 |  4 | 1 | -1
     | 6 | 6 | six   | 2 |  4 | 2 |  2
     | 6 | 6 | six   | 2 |  4 | 2 |  4
     | 6 | 6 | six   | 2 |  4 | 3 | -3
     | 6 | 6 | six   | 2 |  4 | 5 | -5
     | 6 | 6 | six   | 2 |  4 | 5 | -5
     | 6 | 6 | six   | 2 |  4 |   |  0
     | 6 | 6 | six   | 2 |  4 |   |   
     | 6 | 6 | six   | 3 | -3 | 0 |   
     | 6 | 6 | six   | 3 | -3 | 1 | -1
     | 6 | 6 | six   | 3 | -3 | 2 |  2
     | 6 | 6 | six   | 3 | -3 | 2 |  4
     | 6 | 6 | six   | 3 | -3 | 3 | -3
     | 6 | 6 | six   | 3 | -3 | 5 | -5
     | 6 | 6 | six   | 3 | -3 | 5 | -5
     | 6 | 6 | six   | 3 | -3 |   |  0
     | 6 | 6 | six   | 3 | -3 |   |   
     | 6 | 6 | six   | 5 | -5 | 0 |   
     | 6 | 6 | six   | 5 | -5 | 0 |   
     | 6 | 6 | six   | 5 | -5 | 1 | -1
     | 6 | 6 | six   | 5 | -5 | 1 | -1
     | 6 | 6 | six   | 5 | -5 | 2 |  2
     | 6 | 6 | six   | 5 | -5 | 2 |  2
     | 6 | 6 | six   | 5 | -5 | 2 |  4
     | 6 | 6 | six   | 5 | -5 | 2 |  4
     | 6 | 6 | six   | 5 | -5 | 3 | -3
     | 6 | 6 | six   | 5 | -5 | 3 | -3
     | 6 | 6 | six   | 5 | -5 | 5 | -5
     | 6 | 6 | six   | 5 | -5 | 5 | -5
     | 6 | 6 | six   | 5 | -5 | 5 | -5
     | 6 | 6 | six   | 5 | -5 | 5 | -5
     | 6 | 6 | six   | 5 | -5 |   |  0
     | 6 | 6 | six   | 5 | -5 |   |  0
     | 6 | 6 | six   | 5 | -5 |   |   
     | 6 | 6 | six   | 5 | -5 |   |   
     | 6 | 6 | six   |   |  0 | 0 |   
     | 6 | 6 | six   |   |  0 | 1 | -1
     | 6 | 6 | six   |   |  0 | 2 |  2
     | 6 | 6 | six   |   |  0 | 2 |  4
     | 6 | 6 | six   |   |  0 | 3 | -3
     | 6 | 6 | six   |   |  0 | 5 | -5
     | 6 | 6 | six   |   |  0 | 5 | -5
     | 6 | 6 | six   |   |  0 |   |  0
     | 6 | 6 | six   |   |  0 |   |   
     | 6 | 6 | six   |   |    | 0 |   
     | 6 | 6 | six   |   |    | 1 | -1
     | 6 | 6 | six   |   |    | 2 |  2
     | 6 | 6 | six   |   |    | 2 |  4
     | 6 | 6 | six   |   |    | 3 | -3
     | 6 | 6 | six   |   |    | 5 | -5
     | 6 | 6 | six   |   |    | 5 | -5
     | 6 | 6 | six   |   |    |   |  0
     | 6 | 6 | six   |   |    |   |   
     | 7 | 7 | seven | 0 |    | 0 |   
     | 7 | 7 | seven | 0 |    | 1 | -1
     | 7 | 7 | seven | 0 |    | 2 |  2
     | 7 | 7 | seven | 0 |    | 2 |  4
     | 7 | 7 | seven | 0 |    | 3 | -3
     | 7 | 7 | seven | 0 |    | 5 | -5
     | 7 | 7 | seven | 0 |    | 5 | -5
     | 7 | 7 | seven | 0 |    |   |  0
     | 7 | 7 | seven | 0 |    |   |   
     | 7 | 7 | seven | 1 | -1 | 0 |   
     | 7 | 7 | seven | 1 | -1 | 1 | -1
     | 7 | 7 | seven | 1 | -1 | 2 |  2
     | 7 | 7 | seven | 1 | -1 | 2 |  4
     | 7 | 7 | seven | 1 | -1 | 3 | -3
     | 7 | 7 | seven | 1 | -1 | 5 | -5
     | 7 | 7 | seven | 1 | -1 | 5 | -5
     | 7 | 7 | seven | 1 | -1 |   |  0
     | 7 | 7 | seven | 1 | -1 |   |   
     | 7 | 7 | seven | 2 |  2 | 0 |   
     | 7 | 7 | seven | 2 |  2 | 1 | -1
     | 7 | 7 | seven | 2 |  2 | 2 |  2
     | 7 | 7 | seven | 2 |  2 | 2 |  4
     | 7 | 7 | seven | 2 |  2 | 3 | -3
     | 7 | 7 | seven | 2 |  2 | 5 | -5
     | 7 | 7 | seven | 2 |  2 | 5 | -5
     | 7 | 7 | seven | 2 |  2 |   |  0
     | 7 | 7 | seven | 2 |  2 |   |   
     | 7 | 7 | seven | 2 |  4 | 0 |   
     | 7 | 7 | seven | 2 |  4 | 1 | -1
     | 7 | 7 | seven | 2 |  4 | 2 |  2
     | 7 | 7 | seven | 2 |  4 | 2 |  4
     | 7 | 7 | seven | 2 |  4 | 3 | -3
     | 7 | 7 | seven | 2 |  4 | 5 | -5
     | 7 | 7 | seven | 2 |  4 | 5 | -5
     | 7 | 7 | seven | 2 |  4 |   |  0
     | 7 | 7 | seven | 2 |  4 |   |   
     | 7 | 7 | seven | 3 | -3 | 0 |   
     | 7 | 7 | seven | 3 | -3 | 1 | -1
     | 7 | 7 | seven | 3 | -3 | 2 |  2
     | 7 | 7 | seven | 3 | -3 | 2 |  4
     | 7 | 7 | seven | 3 | -3 | 3 | -3
     | 7 | 7 | seven | 3 | -3 | 5 | -5
     | 7 | 7 | seven | 3 | -3 | 5 | -5
     | 7 | 7 | seven | 3 | -3 |   |  0
     | 7 | 7 | seven | 3 | -3 |   |   
     | 7 | 7 | seven | 5 | -5 | 0 |   
     | 7 | 7 | seven | 5 | -5 | 0 |   
     | 7 | 7 | seven | 5 | -5 | 1 | -1
     | 7 | 7 | seven | 5 | -5 | 1 | -1
     | 7 | 7 | seven | 5 | -5 | 2 |  2
     | 7 | 7 | seven | 5 | -5 | 2 |  2
     | 7 | 7 | seven | 5 | -5 | 2 |  4
     | 7 | 7 | seven | 5 | -5 | 2 |  4
     | 7 | 7 | seven | 5 | -5 | 3 | -3
     | 7 | 7 | seven | 5 | -5 | 3 | -3
     | 7 | 7 | seven | 5 | -5 | 5 | -5
     | 7 | 7 | seven | 5 | -5 | 5 | -5
     | 7 | 7 | seven | 5 | -5 | 5 | -5
     | 7 | 7 | seven | 5 | -5 | 5 | -5
     | 7 | 7 | seven | 5 | -5 |   |  0
     | 7 | 7 | seven | 5 | -5 |   |  0
     | 7 | 7 | seven | 5 | -5 |   |   
     | 7 | 7 | seven | 5 | -5 |   |   
     | 7 | 7 | seven |   |  0 | 0 |   
     | 7 | 7 | seven |   |  0 | 1 | -1
     | 7 | 7 | seven |   |  0 | 2 |  2
     | 7 | 7 | seven |   |  0 | 2 |  4
     | 7 | 7 | seven |   |  0 | 3 | -3
     | 7 | 7 | seven |   |  0 | 5 | -5
     | 7 | 7 | seven |   |  0 | 5 | -5
     | 7 | 7 | seven |   |  0 |   |  0
     | 7 | 7 | seven |   |  0 |   |   
     | 7 | 7 | seven |   |    | 0 |   
     | 7 | 7 | seven |   |    | 1 | -1
     | 7 | 7 | seven |   |    | 2 |  2
     | 7 | 7 | seven |   |    | 2 |  4
     | 7 | 7 | seven |   |    | 3 | -3
     | 7 | 7 | seven |   |    | 5 | -5
     | 7 | 7 | seven |   |    | 5 | -5
     | 7 | 7 | seven |   |    |   |  0
     | 7 | 7 | seven |   |    |   |   
     | 8 | 8 | eight | 0 |    | 0 |   
     | 8 | 8 | eight | 0 |    | 1 | -1
     | 8 | 8 | eight | 0 |    | 2 |  2
     | 8 | 8 | eight | 0 |    | 2 |  4
     | 8 | 8 | eight | 0 |    | 3 | -3
     | 8 | 8 | eight | 0 |    | 5 | -5
     | 8 | 8 | eight | 0 |    | 5 | -5
     | 8 | 8 | eight | 0 |    |   |  0
     | 8 | 8 | eight | 0 |    |   |   
     | 8 | 8 | eight | 1 | -1 | 0 |   
     | 8 | 8 | eight | 1 | -1 | 1 | -1
     | 8 | 8 | eight | 1 | -1 | 2 |  2
     | 8 | 8 | eight | 1 | -1 | 2 |  4
     | 8 | 8 | eight | 1 | -1 | 3 | -3
     | 8 | 8 | eight | 1 | -1 | 5 | -5
     | 8 | 8 | eight | 1 | -1 | 5 | -5
     | 8 | 8 | eight | 1 | -1 |   |  0
     | 8 | 8 | eight | 1 | -1 |   |   
     | 8 | 8 | eight | 2 |  2 | 0 |   
     | 8 | 8 | eight | 2 |  2 | 1 | -1
     | 8 | 8 | eight | 2 |  2 | 2 |  2
     | 8 | 8 | eight | 2 |  2 | 2 |  4
     | 8 | 8 | eight | 2 |  2 | 3 | -3
     | 8 | 8 | eight | 2 |  2 | 5 | -5
     | 8 | 8 | eight | 2 |  2 | 5 | -5
     | 8 | 8 | eight | 2 |  2 |   |  0
     | 8 | 8 | eight | 2 |  2 |   |   
     | 8 | 8 | eight | 2 |  4 | 0 |   
     | 8 | 8 | eight | 2 |  4 | 1 | -1
     | 8 | 8 | eight | 2 |  4 | 2 |  2
     | 8 | 8 | eight | 2 |  4 | 2 |  4
     | 8 | 8 | eight | 2 |  4 | 3 | -3
     | 8 | 8 | eight | 2 |  4 | 5 | -5
     | 8 | 8 | eight | 2 |  4 | 5 | -5
     | 8 | 8 | eight | 2 |  4 |   |  0
     | 8 | 8 | eight | 2 |  4 |   |   
     | 8 | 8 | eight | 3 | -3 | 0 |   
     | 8 | 8 | eight | 3 | -3 | 1 | -1
     | 8 | 8 | eight | 3 | -3 | 2 |  2
     | 8 | 8 | eight | 3 | -3 | 2 |  4
     | 8 | 8 | eight | 3 | -3 | 3 | -3
     | 8 | 8 | eight | 3 | -3 | 5 | -5
     | 8 | 8 | eight | 3 | -3 | 5 | -5
     | 8 | 8 | eight | 3 | -3 |   |  0
     | 8 | 8 | eight | 3 | -3 |   |   
     | 8 | 8 | eight | 5 | -5 | 0 |   
     | 8 | 8 | eight | 5 | -5 | 0 |   
     | 8 | 8 | eight | 5 | -5 | 1 | -1
     | 8 | 8 | eight | 5 | -5 | 1 | -1
     | 8 | 8 | eight | 5 | -5 | 2 |  2
     | 8 | 8 | eight | 5 | -5 | 2 |  2
     | 8 | 8 | eight | 5 | -5 | 2 |  4
     | 8 | 8 | eight | 5 | -5 | 2 |  4
     | 8 | 8 | eight | 5 | -5 | 3 | -3
     | 8 | 8 | eight | 5 | -5 | 3 | -3
     | 8 | 8 | eight | 5 | -5 | 5 | -5
     | 8 | 8 | eight | 5 | -5 | 5 | -5
     | 8 | 8 | eight | 5 | -5 | 5 | -5
     | 8 | 8 | eight | 5 | -5 | 5 | -5
     | 8 | 8 | eight | 5 | -5 |   |  0
     | 8 | 8 | eight | 5 | -5 |   |  0
     | 8 | 8 | eight | 5 | -5 |   |   
     | 8 | 8 | eight | 5 | -5 |   |   
     | 8 | 8 | eight |   |  0 | 0 |   
     | 8 | 8 | eight |   |  0 | 1 | -1
     | 8 | 8 | eight |   |  0 | 2 |  2
     | 8 | 8 | eight |   |  0 | 2 |  4
     | 8 | 8 | eight |   |  0 | 3 | -3
     | 8 | 8 | eight |   |  0 | 5 | -5
     | 8 | 8 | eight |   |  0 | 5 | -5
     | 8 | 8 | eight |   |  0 |   |  0
     | 8 | 8 | eight |   |  0 |   |   
     | 8 | 8 | eight |   |    | 0 |   
     | 8 | 8 | eight |   |    | 1 | -1
     | 8 | 8 | eight |   |    | 2 |  2
     | 8 | 8 | eight |   |    | 2 |  4
     | 8 | 8 | eight |   |    | 3 | -3
     | 8 | 8 | eight |   |    | 5 | -5
     | 8 | 8 | eight |   |    | 5 | -5
     | 8 | 8 | eight |   |    |   |  0
     | 8 | 8 | eight |   |    |   |   
     |   | 0 | zero  | 0 |    | 0 |   
     |   | 0 | zero  | 0 |    | 1 | -1
     |   | 0 | zero  | 0 |    | 2 |  2
     |   | 0 | zero  | 0 |    | 2 |  4
     |   | 0 | zero  | 0 |    | 3 | -3
     |   | 0 | zero  | 0 |    | 5 | -5
     |   | 0 | zero  | 0 |    | 5 | -5
     |   | 0 | zero  | 0 |    |   |  0
     |   | 0 | zero  | 0 |    |   |   
     |   | 0 | zero  | 1 | -1 | 0 |   
     |   | 0 | zero  | 1 | -1 | 1 | -1
     |   | 0 | zero  | 1 | -1 | 2 |  2
     |   | 0 | zero  | 1 | -1 | 2 |  4
     |   | 0 | zero  | 1 | -1 | 3 | -3
     |   | 0 | zero  | 1 | -1 | 5 | -5
     |   | 0 | zero  | 1 | -1 | 5 | -5
     |   | 0 | zero  | 1 | -1 |   |  0
     |   | 0 | zero  | 1 | -1 |   |   
     |   | 0 | zero  | 2 |  2 | 0 |   
     |   | 0 | zero  | 2 |  2 | 1 | -1
     |   | 0 | zero  | 2 |  2 | 2 |  2
     |   | 0 | zero  | 2 |  2 | 2 |  4
     |   | 0 | zero  | 2 |  2 | 3 | -3
     |   | 0 | zero  | 2 |  2 | 5 | -5
     |   | 0 | zero  | 2 |  2 | 5 | -5
     |   | 0 | zero  | 2 |  2 |   |  0
     |   | 0 | zero  | 2 |  2 |   |   
     |   | 0 | zero  | 2 |  4 | 0 |   
     |   | 0 | zero  | 2 |  4 | 1 | -1
     |   | 0 | zero  | 2 |  4 | 2 |  2
     |   | 0 | zero  | 2 |  4 | 2 |  4
     |   | 0 | zero  | 2 |  4 | 3 | -3
     |   | 0 | zero  | 2 |  4 | 5 | -5
     |   | 0 | zero  | 2 |  4 | 5 | -5
     |   | 0 | zero  | 2 |  4 |   |  0
     |   | 0 | zero  | 2 |  4 |   |   
     |   | 0 | zero  | 3 | -3 | 0 |   
     |   | 0 | zero  | 3 | -3 | 1 | -1
     |   | 0 | zero  | 3 | -3 | 2 |  2
     |   | 0 | zero  | 3 | -3 | 2 |  4
     |   | 0 | zero  | 3 | -3 | 3 | -3
     |   | 0 | zero  | 3 | -3 | 5 | -5
     |   | 0 | zero  | 3 | -3 | 5 | -5
     |   | 0 | zero  | 3 | -3 |   |  0
     |   | 0 | zero  | 3 | -3 |   |   
     |   | 0 | zero  | 5 | -5 | 0 |   
     |   | 0 | zero  | 5 | -5 | 0 |   
     |   | 0 | zero  | 5 | -5 | 1 | -1
     |   | 0 | zero  | 5 | -5 | 1 | -1
     |   | 0 | zero  | 5 | -5 | 2 |  2
     |   | 0 | zero  | 5 | -5 | 2 |  2
     |   | 0 | zero  | 5 | -5 | 2 |  4
     |   | 0 | zero  | 5 | -5 | 2 |  4
     |   | 0 | zero  | 5 | -5 | 3 | -3
     |   | 0 | zero  | 5 | -5 | 3 | -3
     |   | 0 | zero  | 5 | -5 | 5 | -5
     |   | 0 | zero  | 5 | -5 | 5 | -5
     |   | 0 | zero  | 5 | -5 | 5 | -5
     |   | 0 | zero  | 5 | -5 | 5 | -5
     |   | 0 | zero  | 5 | -5 |   |  0
     |   | 0 | zero  | 5 | -5 |   |  0
     |   | 0 | zero  | 5 | -5 |   |   
     |   | 0 | zero  | 5 | -5 |   |   
     |   | 0 | zero  |   |  0 | 0 |   
     |   | 0 | zero  |   |  0 | 1 | -1
     |   | 0 | zero  |   |  0 | 2 |  2
     |   | 0 | zero  |   |  0 | 2 |  4
     |   | 0 | zero  |   |  0 | 3 | -3
     |   | 0 | zero  |   |  0 | 5 | -5
     |   | 0 | zero  |   |  0 | 5 | -5
     |   | 0 | zero  |   |  0 |   |  0
     |   | 0 | zero  |   |  0 |   |   
     |   | 0 | zero  |   |    | 0 |   
     |   | 0 | zero  |   |    | 1 | -1
     |   | 0 | zero  |   |    | 2 |  2
     |   | 0 | zero  |   |    | 2 |  4
     |   | 0 | zero  |   |    | 3 | -3
     |   | 0 | zero  |   |    | 5 | -5
     |   | 0 | zero  |   |    | 5 | -5
     |   | 0 | zero  |   |    |   |  0
     |   | 0 | zero  |   |    |   |   
     |   |   | null  | 0 |    | 0 |   
     |   |   | null  | 0 |    | 1 | -1
     |   |   | null  | 0 |    | 2 |  2
     |   |   | null  | 0 |    | 2 |  4
     |   |   | null  | 0 |    | 3 | -3
     |   |   | null  | 0 |    | 5 | -5
     |   |   | null  | 0 |    | 5 | -5
     |   |   | null  | 0 |    |   |  0
     |   |   | null  | 0 |    |   |   
     |   |   | null  | 1 | -1 | 0 |   
     |   |   | null  | 1 | -1 | 1 | -1
     |   |   | null  | 1 | -1 | 2 |  2
     |   |   | null  | 1 | -1 | 2 |  4
     |   |   | null  | 1 | -1 | 3 | -3
     |   |   | null  | 1 | -1 | 5 | -5
     |   |   | null  | 1 | -1 | 5 | -5
     |   |   | null  | 1 | -1 |   |  0
     |   |   | null  | 1 | -1 |   |   
     |   |   | null  | 2 |  2 | 0 |   
     |   |   | null  | 2 |  2 | 1 | -1
     |   |   | null  | 2 |  2 | 2 |  2
     |   |   | null  | 2 |  2 | 2 |  4
     |   |   | null  | 2 |  2 | 3 | -3
     |   |   | null  | 2 |  2 | 5 | -5
     |   |   | null  | 2 |  2 | 5 | -5
     |   |   | null  | 2 |  2 |   |  0
     |   |   | null  | 2 |  2 |   |   
     |   |   | null  | 2 |  4 | 0 |   
     |   |   | null  | 2 |  4 | 1 | -1
     |   |   | null  | 2 |  4 | 2 |  2
     |   |   | null  | 2 |  4 | 2 |  4
     |   |   | null  | 2 |  4 | 3 | -3
     |   |   | null  | 2 |  4 | 5 | -5
     |   |   | null  | 2 |  4 | 5 | -5
     |   |   | null  | 2 |  4 |   |  0
     |   |   | null  | 2 |  4 |   |   
     |   |   | null  | 3 | -3 | 0 |   
     |   |   | null  | 3 | -3 | 1 | -1
     |   |   | null  | 3 | -3 | 2 |  2
     |   |   | null  | 3 | -3 | 2 |  4
     |   |   | null  | 3 | -3 | 3 | -3
     |   |   | null  | 3 | -3 | 5 | -5
     |   |   | null  | 3 | -3 | 5 | -5
     |   |   | null  | 3 | -3 |   |  0
     |   |   | null  | 3 | -3 |   |   
     |   |   | null  | 5 | -5 | 0 |   
     |   |   | null  | 5 | -5 | 0 |   
     |   |   | null  | 5 | -5 | 1 | -1
     |   |   | null  | 5 | -5 | 1 | -1
     |   |   | null  | 5 | -5 | 2 |  2
     |   |   | null  | 5 | -5 | 2 |  2
     |   |   | null  | 5 | -5 | 2 |  4
     |   |   | null  | 5 | -5 | 2 |  4
     |   |   | null  | 5 | -5 | 3 | -3
     |   |   | null  | 5 | -5 | 3 | -3
     |   |   | null  | 5 | -5 | 5 | -5
     |   |   | null  | 5 | -5 | 5 | -5
     |   |   | null  | 5 | -5 | 5 | -5
     |   |   | null  | 5 | -5 | 5 | -5
     |   |   | null  | 5 | -5 |   |  0
     |   |   | null  | 5 | -5 |   |  0
     |   |   | null  | 5 | -5 |   |   
     |   |   | null  | 5 | -5 |   |   
     |   |   | null  |   |  0 | 0 |   
     |   |   | null  |   |  0 | 1 | -1
     |   |   | null  |   |  0 | 2 |  2
     |   |   | null  |   |  0 | 2 |  4
     |   |   | null  |   |  0 | 3 | -3
     |   |   | null  |   |  0 | 5 | -5
     |   |   | null  |   |  0 | 5 | -5
     |   |   | null  |   |  0 |   |  0
     |   |   | null  |   |  0 |   |   
     |   |   | null  |   |    | 0 |   
     |   |   | null  |   |    | 1 | -1
     |   |   | null  |   |    | 2 |  2
     |   |   | null  |   |    | 2 |  4
     |   |   | null  |   |    | 3 | -3
     |   |   | null  |   |    | 5 | -5
     |   |   | null  |   |    | 5 | -5
     |   |   | null  |   |    |   |  0
     |   |   | null  |   |    |   |   
(891 rows)

--
--
-- Inner joins (equi-joins)
--
--
--
-- Inner joins (equi-joins) with USING clause
-- The USING syntax changes the shape of the resulting table
-- by including a column in the USING clause only once in the result.
--
-- Inner equi-join on specified column
SELECT '' AS "xxx", *
  FROM J1_TBL INNER JOIN J2_TBL USING (i) ORDER BY 2,3,4,5;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
(7 rows)

-- Same as above, slightly different syntax
SELECT '' AS "xxx", *
  FROM J1_TBL JOIN J2_TBL USING (i) ORDER BY 2,3,4,5;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
(7 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL t1_join (a, b, c) JOIN J2_TBL t2_join (a, d) USING (a)
  ORDER BY a, d;
 xxx | a | b |   c   | d  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
(7 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL t1_join (a, b, c) JOIN J2_TBL t2_join (a, b) USING (b)
  ORDER BY b, t1_join.a;
 xxx | b | a |   c   | a 
-----+---+---+-------+---
     | 0 | 5 | five  |  
     | 0 |   | zero  |  
     | 2 | 3 | three | 2
     | 4 | 1 | one   | 2
(4 rows)

--
-- NATURAL JOIN
-- Inner equi-join on all columns with the same name
--
SELECT '' AS "xxx", *
  FROM J1_TBL NATURAL JOIN J2_TBL ORDER BY 2,3,4,5;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
(7 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL t1_join (a, b, c) NATURAL JOIN J2_TBL t2_join (a, d) ORDER BY 2,3,4,5;
 xxx | a | b |   c   | d  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
(7 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL t1_join (a, b, c) NATURAL JOIN J2_TBL t2_join (d, a) ORDER BY 2,3,4,5;
 xxx | a | b |  c   | d 
-----+---+---+------+---
     | 0 |   | zero |  
     | 2 | 3 | two  | 2
     | 4 | 1 | four | 2
(3 rows)

-- mismatch number of columns
-- currently, Postgres will fill in with underlying names
SELECT '' AS "xxx", *
  FROM J1_TBL t1_join (a, b) NATURAL JOIN J2_TBL t2_join (a) ORDER BY 2,3,4,5;
 xxx | a | b |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
(7 rows)

--
-- Inner joins (equi-joins)
--
SELECT '' AS "xxx", *
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.i) ORDER BY 2,3,4,5,6;
 xxx | i | j |   t   | i | k  
-----+---+---+-------+---+----
     | 0 |   | zero  | 0 |   
     | 1 | 4 | one   | 1 | -1
     | 2 | 3 | two   | 2 |  2
     | 2 | 3 | two   | 2 |  4
     | 3 | 2 | three | 3 | -3
     | 5 | 0 | five  | 5 | -5
     | 5 | 0 | five  | 5 | -5
(7 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.k) ORDER BY 2,3,4,5,6;
 xxx | i | j |  t   | i | k 
-----+---+---+------+---+---
     | 0 |   | zero |   | 0
     | 2 | 3 | two  | 2 | 2
     | 4 | 1 | four | 2 | 4
(3 rows)

--
-- Non-equi-joins
--
SELECT '' AS "xxx", *
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i <= J2_TBL.k) ORDER BY 2,3,4,5,6;
 xxx | i | j |   t   | i | k 
-----+---+---+-------+---+---
     | 0 |   | zero  | 2 | 2
     | 0 |   | zero  | 2 | 4
     | 0 |   | zero  |   | 0
     | 1 | 4 | one   | 2 | 2
     | 1 | 4 | one   | 2 | 4
     | 2 | 3 | two   | 2 | 2
     | 2 | 3 | two   | 2 | 4
     | 3 | 2 | three | 2 | 4
     | 4 | 1 | four  | 2 | 4
(9 rows)

--
-- Outer joins
-- Note that OUTER is a noise word
--
SELECT '' AS "xxx", *
  FROM J1_TBL LEFT OUTER JOIN J2_TBL USING (i)
  ORDER BY i, k, t;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 4 | 1 | four  |   
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
     | 6 | 6 | six   |   
     | 7 | 7 | seven |   
     | 8 | 8 | eight |   
     |   |   | null  |   
     |   | 0 | zero  |   
(13 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL LEFT JOIN J2_TBL USING (i)
  ORDER BY i, k, t;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 4 | 1 | four  |   
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
     | 6 | 6 | six   |   
     | 7 | 7 | seven |   
     | 8 | 8 | eight |   
     |   |   | null  |   
     |   | 0 | zero  |   
(13 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL RIGHT OUTER JOIN J2_TBL USING (i) ORDER BY 2,3,4,5;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
     |   |   |       |  0
     |   |   |       |   
(9 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL RIGHT JOIN J2_TBL USING (i) ORDER BY 2,3,4,5;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
     |   |   |       |  0
     |   |   |       |   
(9 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL FULL OUTER JOIN J2_TBL USING (i)
  ORDER BY i, k, t;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 4 | 1 | four  |   
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
     | 6 | 6 | six   |   
     | 7 | 7 | seven |   
     | 8 | 8 | eight |   
     |   |   |       |  0
     |   |   | null  |   
     |   | 0 | zero  |   
     |   |   |       |   
(15 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL FULL JOIN J2_TBL USING (i)
  ORDER BY i, k, t;
 xxx | i | j |   t   | k  
-----+---+---+-------+----
     | 0 |   | zero  |   
     | 1 | 4 | one   | -1
     | 2 | 3 | two   |  2
     | 2 | 3 | two   |  4
     | 3 | 2 | three | -3
     | 4 | 1 | four  |   
     | 5 | 0 | five  | -5
     | 5 | 0 | five  | -5
     | 6 | 6 | six   |   
     | 7 | 7 | seven |   
     | 8 | 8 | eight |   
     |   |   |       |  0
     |   |   | null  |   
     |   | 0 | zero  |   
     |   |   |       |   
(15 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (k = 1) ORDER BY 2,3,4,5;
 xxx | i | j | t | k 
-----+---+---+---+---
(0 rows)

SELECT '' AS "xxx", *
  FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (i = 1) ORDER BY 2,3,4,5;
 xxx | i | j |  t  | k  
-----+---+---+-----+----
     | 1 | 4 | one | -1
(1 row)

--
-- More complicated constructs
--
--
-- Multiway full join
--
CREATE TABLE t1_join (name TEXT, n INTEGER);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'name' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE t2_join (name TEXT, n INTEGER);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'name' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE t3_join (name TEXT, n INTEGER);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'name' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO t1_join VALUES ( 'aa', 11 );
INSERT INTO t2_join VALUES ( 'aa', 12 );
INSERT INTO t2_join VALUES ( 'bb', 22 );
INSERT INTO t2_join VALUES ( 'dd', 42 );
INSERT INTO t3_join VALUES ( 'aa', 13 );
INSERT INTO t3_join VALUES ( 'bb', 23 );
INSERT INTO t3_join VALUES ( 'cc', 33 );
SELECT * FROM t1_join FULL JOIN t2_join USING (name) FULL JOIN t3_join USING (name) ORDER BY 1,2,3,4;
 name | n  | n  | n  
------+----+----+----
 aa   | 11 | 12 | 13
 bb   |    | 22 | 23
 cc   |    |    | 33
 dd   |    | 42 |   
(4 rows)

--
-- Test interactions of join syntax and subqueries
--
-- Basic cases (we expect planner to pull up the subquery here)
SELECT * FROM
(SELECT * FROM t2_join) as s2
INNER JOIN
(SELECT * FROM t3_join) s3
USING (name) ORDER BY 1,2,3;
 name | n  | n  
------+----+----
 aa   | 12 | 13
 bb   | 22 | 23
(2 rows)

SELECT * FROM
(SELECT * FROM t2_join) as s2
LEFT JOIN
(SELECT * FROM t3_join) s3
USING (name) ORDER BY 1,2,3;
 name | n  | n  
------+----+----
 aa   | 12 | 13
 bb   | 22 | 23
 dd   | 42 |   
(3 rows)

SELECT * FROM
(SELECT * FROM t2_join) as s2
FULL JOIN
(SELECT * FROM t3_join) s3
USING (name) ORDER BY 1,2,3;
 name | n  | n  
------+----+----
 aa   | 12 | 13
 bb   | 22 | 23
 cc   |    | 33
 dd   | 42 |   
(4 rows)

-- Cases with non-nullable expressions in subquery results;
-- make sure these go to null as expected
SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2_join) as s2
NATURAL INNER JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3_join) s3 ORDER BY 1,2,3;
 name | s2_n | s2_2 | s3_n | s3_2 
------+------+------+------+------
 aa   |   12 |    2 |   13 |    3
 bb   |   22 |    2 |   23 |    3
(2 rows)

SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2_join) as s2
NATURAL LEFT JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3_join) s3 ORDER BY 1,2,3;
 name | s2_n | s2_2 | s3_n | s3_2 
------+------+------+------+------
 aa   |   12 |    2 |   13 |    3
 bb   |   22 |    2 |   23 |    3
 dd   |   42 |    2 |      |     
(3 rows)

SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2_join) as s2
NATURAL FULL JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3_join) s3 ORDER BY 1,2,3;
 name | s2_n | s2_2 | s3_n | s3_2 
------+------+------+------+------
 aa   |   12 |    2 |   13 |    3
 bb   |   22 |    2 |   23 |    3
 cc   |      |      |   33 |    3
 dd   |   42 |    2 |      |     
(4 rows)

SELECT * FROM
(SELECT name, n as s1_n, 1 as s1_1 FROM t1_join) as s1
NATURAL INNER JOIN
(SELECT name, n as s2_n, 2 as s2_2 FROM t2_join) as s2
NATURAL INNER JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3_join) s3 ORDER BY 1,2,3;
 name | s1_n | s1_1 | s2_n | s2_2 | s3_n | s3_2 
------+------+------+------+------+------+------
 aa   |   11 |    1 |   12 |    2 |   13 |    3
(1 row)

SELECT * FROM
(SELECT name, n as s1_n, 1 as s1_1 FROM t1_join) as s1
NATURAL FULL JOIN
(SELECT name, n as s2_n, 2 as s2_2 FROM t2_join) as s2
NATURAL FULL JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3_join) s3 ORDER BY 1,2,3;
 name | s1_n | s1_1 | s2_n | s2_2 | s3_n | s3_2 
------+------+------+------+------+------+------
 aa   |   11 |    1 |   12 |    2 |   13 |    3
 bb   |      |      |   22 |    2 |   23 |    3
 cc   |      |      |      |      |   33 |    3
 dd   |      |      |   42 |    2 |      |     
(4 rows)

SELECT * FROM
(SELECT name, n as s1_n FROM t1_join) as s1
NATURAL FULL JOIN
  (SELECT * FROM
    (SELECT name, n as s2_n FROM t2_join) as s2
    NATURAL FULL JOIN
    (SELECT name, n as s3_n FROM t3_join) as s3
  ) ss2 ORDER BY 1,2,3;
 name | s1_n | s2_n | s3_n 
------+------+------+------
 aa   |   11 |   12 |   13
 bb   |      |   22 |   23
 cc   |      |      |   33
 dd   |      |   42 |     
(4 rows)

SELECT * FROM
(SELECT name, n as s1_n FROM t1_join) as s1
NATURAL FULL JOIN
  (SELECT * FROM
    (SELECT name, n as s2_n, 2 as s2_2 FROM t2_join) as s2
    NATURAL FULL JOIN
    (SELECT name, n as s3_n FROM t3_join) as s3
  ) ss2 ORDER BY 1,2,3;
 name | s1_n | s2_n | s2_2 | s3_n 
------+------+------+------+------
 aa   |   11 |   12 |    2 |   13
 bb   |      |   22 |    2 |   23
 cc   |      |      |      |   33
 dd   |      |   42 |    2 |     
(4 rows)

-- Test for propagation of nullability constraints into sub-joins
create temp table x (x1 int, x2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into x values (1,11);
insert into x values (2,22);
insert into x values (3,null);
insert into x values (4,44);
insert into x values (5,null);
create temp table y (y1 int, y2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'y1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into y values (1,111);
insert into y values (2,222);
insert into y values (3,333);
insert into y values (4,null);
select * from x ORDER BY 1,2;
 x1 | x2 
----+----
  1 | 11
  2 | 22
  3 |   
  4 | 44
  5 |   
(5 rows)

select * from y ORDER BY 1,2;
 y1 | y2  
----+-----
  1 | 111
  2 | 222
  3 | 333
  4 |    
(4 rows)

select * from x left join y on (x1 = y1 and x2 is not null) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  
----+----+----+-----
  1 | 11 |  1 | 111
  2 | 22 |  2 | 222
  3 |    |    |    
  4 | 44 |  4 |    
  5 |    |    |    
(5 rows)

select * from x left join y on (x1 = y1 and y2 is not null) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  
----+----+----+-----
  1 | 11 |  1 | 111
  2 | 22 |  2 | 222
  3 |    |  3 | 333
  4 | 44 |    |    
  5 |    |    |    
(5 rows)

select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  | xx1 | xx2 
----+----+----+-----+-----+-----
  1 | 11 |  1 | 111 |   1 |  11
  2 | 22 |  2 | 222 |   2 |  22
  3 |    |  3 | 333 |   3 |    
  4 | 44 |  4 |     |   4 |  44
  5 |    |    |     |   5 |    
(5 rows)

select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1 and x2 is not null) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  | xx1 | xx2 
----+----+----+-----+-----+-----
  1 | 11 |  1 | 111 |   1 |  11
  2 | 22 |  2 | 222 |   2 |  22
  3 |    |  3 | 333 |     |    
  4 | 44 |  4 |     |   4 |  44
  5 |    |    |     |     |    
(5 rows)

select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1 and y2 is not null) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  | xx1 | xx2 
----+----+----+-----+-----+-----
  1 | 11 |  1 | 111 |   1 |  11
  2 | 22 |  2 | 222 |   2 |  22
  3 |    |  3 | 333 |   3 |    
  4 | 44 |  4 |     |     |    
  5 |    |    |     |     |    
(5 rows)

select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1 and xx2 is not null) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  | xx1 | xx2 
----+----+----+-----+-----+-----
  1 | 11 |  1 | 111 |   1 |  11
  2 | 22 |  2 | 222 |   2 |  22
  3 |    |  3 | 333 |     |    
  4 | 44 |  4 |     |   4 |  44
  5 |    |    |     |     |    
(5 rows)

-- these should NOT give the same answers as above
select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1) where (x2 is not null) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  | xx1 | xx2 
----+----+----+-----+-----+-----
  1 | 11 |  1 | 111 |   1 |  11
  2 | 22 |  2 | 222 |   2 |  22
  4 | 44 |  4 |     |   4 |  44
(3 rows)

select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1) where (y2 is not null) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  | xx1 | xx2 
----+----+----+-----+-----+-----
  1 | 11 |  1 | 111 |   1 |  11
  2 | 22 |  2 | 222 |   2 |  22
  3 |    |  3 | 333 |   3 |    
(3 rows)

select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1) where (xx2 is not null) ORDER BY 1,2,3,4;
 x1 | x2 | y1 | y2  | xx1 | xx2 
----+----+----+-----+-----+-----
  1 | 11 |  1 | 111 |   1 |  11
  2 | 22 |  2 | 222 |   2 |  22
  4 | 44 |  4 |     |   4 |  44
(3 rows)

--
-- regression test: check for bug with propagation of implied equality
-- to outside an IN
--
select count(*) from tenk1 a where unique1 in
  (select unique1 from tenk1 b join tenk1 c using (unique1)
   where b.unique2 = 42);
 count 
-------
     1
(1 row)

--
-- regression test: check for failure to generate a plan with multiple
-- degenerate IN clauses
--
select count(*) from tenk1 x where
  x.unique1 in (select a.f1 from int4_tbl a,float8_tbl b where a.f1=b.f1) and
  x.unique1 = 0 and
  x.unique1 in (select aa.f1 from int4_tbl aa,float8_tbl bb where aa.f1=bb.f1);
 count 
-------
     1
(1 row)

--
-- Clean up
--
DROP TABLE t1_join;
DROP TABLE t2_join;
DROP TABLE t3_join;
DROP TABLE J1_TBL;
DROP TABLE J2_TBL;
-- Both DELETE and UPDATE allow the specification of additional tables
-- to "join" against to determine which rows should be modified.
CREATE TEMP TABLE t1_join (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TEMP TABLE t2_join (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TEMP TABLE t3_join (x int, y int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TEMP TABLE t4_join (x int, y int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO t1_join VALUES (5, 10);
INSERT INTO t1_join VALUES (15, 20);
INSERT INTO t1_join VALUES (100, 100);
INSERT INTO t1_join VALUES (200, 1000);
INSERT INTO t2_join VALUES (200, 2000);
INSERT INTO t3_join VALUES (5, 20);
INSERT INTO t3_join VALUES (6, 7);
INSERT INTO t3_join VALUES (7, 8);
INSERT INTO t3_join VALUES (500, 100);
INSERT INTO t4_join SELECT * FROM t3_join;
DELETE FROM t3_join USING t1_join table1 WHERE t3_join.x = table1.a;
SELECT * FROM t3_join ORDER BY 1,2;
  x  |  y  
-----+-----
   6 |   7
   7 |   8
 500 | 100
(3 rows)

DELETE FROM t4_join USING t1_join JOIN t2_join USING (a) WHERE t4_join.x > t1_join.a;
SELECT * FROM t4_join ORDER BY 1,2;
 x | y  
---+----
 5 | 20
 6 |  7
 7 |  8
(3 rows)

DELETE FROM t3_join USING t3_join t3_other WHERE t3_join.x = t3_other.x AND t3_join.y = t3_other.y;
SELECT * FROM t3_join ORDER BY 1,2;
 x | y 
---+---
(0 rows)

--
-- regression test for 8.1 merge right join bug
--
CREATE TEMP TABLE tt1 ( tt1_id int4, joincol int4 );
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'tt1_id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO tt1 VALUES (1, 11);
INSERT INTO tt1 VALUES (2, NULL);
CREATE TEMP TABLE tt2 ( tt2_id int4, joincol int4 );
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'tt2_id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO tt2 VALUES (21, 11);
INSERT INTO tt2 VALUES (22, 11);
set enable_hashjoin to off;
set enable_nestloop to off;
-- these should give the same results
select tt1.*, tt2.* from tt1 left join tt2 on tt1.joincol = tt2.joincol ORDER BY 1,2,3;
 tt1_id | joincol | tt2_id | joincol 
--------+---------+--------+---------
      1 |      11 |     21 |      11
      1 |      11 |     22 |      11
      2 |         |        |        
(3 rows)

select tt1.*, tt2.* from tt2 right join tt1 on tt1.joincol = tt2.joincol ORDER BY 1,2,3;
 tt1_id | joincol | tt2_id | joincol 
--------+---------+--------+---------
      1 |      11 |     21 |      11
      1 |      11 |     22 |      11
      2 |         |        |        
(3 rows)

reset enable_hashjoin;
reset enable_nestloop;
--
-- regression test for 8.2 bug with improper re-ordering of left joins
--
create temp table tt3(f1 int, f2 text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into tt3 select x, repeat('xyzzy', 100) from generate_series(1,10000) x;
create index tt3i on tt3(f1);
analyze tt3;
create temp table tt4(f1 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into tt4 values (0),(1),(9999);
analyze tt4;
SELECT a.f1
FROM tt4 a
LEFT JOIN (
        SELECT b.f1
        FROM tt3 b LEFT JOIN tt3 c ON (b.f1 = c.f1)
        WHERE c.f1 IS NULL
) AS d ON (a.f1 = d.f1)
WHERE d.f1 IS NULL;
  f1  
------
    0
 9999
    1
(3 rows)

--
-- regression test for problems of the sort depicted in bug #3494
--
create temp table tt5(f1 int, f2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create temp table tt6(f1 int, f2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into tt5 values(1, 10);
insert into tt5 values(1, 11);
insert into tt6 values(1, 9);
insert into tt6 values(1, 2);
insert into tt6 values(2, 9);
select * from tt5,tt6 where tt5.f1 = tt6.f1 and tt5.f1 = tt5.f2 - tt6.f2;
 f1 | f2 | f1 | f2 
----+----+----+----
  1 | 10 |  1 |  9
(1 row)

--
-- regression test for problems of the sort depicted in bug #3588
--
create temp table xx (pkxx int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'pkxx' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create temp table yy (pkyy int, pkxx int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'pkyy' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into xx values (1);
insert into xx values (2);
insert into xx values (3);
insert into yy values (101, 1);
insert into yy values (201, 2);
insert into yy values (301, NULL);
select yy.pkyy as yy_pkyy, yy.pkxx as yy_pkxx, yya.pkyy as yya_pkyy,
       xxa.pkxx as xxa_pkxx, xxb.pkxx as xxb_pkxx
from yy
     left join (SELECT * FROM yy where pkyy = 101) as yya ON yy.pkyy = yya.pkyy
     left join xx xxa on yya.pkxx = xxa.pkxx
     left join xx xxb on coalesce (xxa.pkxx, 1) = xxb.pkxx;
 yy_pkyy | yy_pkxx | yya_pkyy | xxa_pkxx | xxb_pkxx 
---------+---------+----------+----------+----------
     101 |       1 |      101 |        1 |        1
     201 |       2 |          |          |        1
     301 |         |          |          |        1
(3 rows)

 
--
-- regression test for improper pushing of constants across outer-join clauses
-- (as seen in early 8.2.x releases)
--
create temp table zt1 (f1 int primary key) distributed by (f1);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "zt1_pkey" for table "zt1"
create temp table zt2 (f2 int primary key) distributed by (f2);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "zt2_pkey" for table "zt2"
create temp table zt3 (f3 int primary key) distributed by (f3);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "zt3_pkey" for table "zt3"
insert into zt1 values(53);
insert into zt2 values(53);
select * from
  zt2 left join zt3 on (f2 = f3)
      left join zt1 on (f3 = f1)
where f2 = 53;
 f2 | f3 | f1 
----+----+----
 53 |    |   
(1 row)

create temp view zv1 as select *,'dummy'::text AS junk from zt1;
select * from
  zt2 left join zt3 on (f2 = f3)
      left join zv1 on (f3 = f1)
where f2 = 53;
 f2 | f3 | f1 | junk 
----+----+----+------
 53 |    |    | 
(1 row)

-- test numeric hash join
set enable_hashjoin to on;
set enable_mergejoin to off;
set enable_nestloop to off;
create table nhtest (i numeric(10, 2)) distributed by (i);
insert into nhtest values(100000.22);
insert into nhtest values(300000.19);
explain select * from nhtest a join nhtest b using (i);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=1.02..2.07 rows=2 width=11)
   ->  Hash Join  (cost=1.02..2.07 rows=2 width=11)
         Hash Cond: a.i = b.i
         ->  Seq Scan on nhtest a  (cost=0.00..1.01 rows=1 width=11)
         ->  Hash  (cost=1.01..1.01 rows=1 width=11)
               ->  Seq Scan on nhtest b  (cost=0.00..1.01 rows=1 width=11)
 Settings:  enable_hashjoin=on; enable_mergejoin=off; enable_nestloop=off
(7 rows)

select * from nhtest a join nhtest b using (i);
     i     
-----------
 300000.19
 100000.22
(2 rows)

create temp table l(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into l values (1), (1), (2);
select * from l l1 join l l2 on l1.a = l2.a left join l l3 on l1.a = l3.a and l1.a = 2 order by 1,2,3;
 a | a | a 
---+---+---
 1 | 1 |  
 1 | 1 |  
 1 | 1 |  
 1 | 1 |  
 2 | 2 | 2
(5 rows)

--
-- test hash join
--
create table hjtest (i int, j int) distributed by (i,j);
insert into hjtest values(3, 4);
select count(*) from hjtest a1, hjtest a2 where a2.i = least (a1.i,4) and a2.j = 4;
 count 
-------
     1
(1 row)

--
-- Test for correct behavior when there is a Merge Join on top of Materialize
-- on top of a Motion :
-- 1. Use FULL OUTER JOIN to induce a Merge Join
-- 2. Use a large tuple size to induce a Materialize
-- 3. Use gp_dist_random() to induce a Redistribute
---
set enable_hashjoin to off;
set enable_mergejoin to on;
set enable_nestloop to off;
CREATE TABLE alpha (i int, j int);
CREATE TABLE theta (i int, j char(10000000));
DROP TABLE IF EXISTS alpha;
DROP TABLE IF EXISTS theta;
INSERT INTO alpha values (1, 1), (2, 2);
INSERT INTO theta values (1, 'f'), (2, 'g');
SELECT *
FROM gp_dist_random('alpha') FULL OUTER JOIN gp_dist_random('theta')
  ON (alpha.i = theta.i)
WHERE (alpha.j IS NULL or theta.j IS NULL);
 i | j | i | j 
---+---+---+---
(0 rows)

reset enable_hashjoin;
reset enable_mergejoin;
reset enable_nestloop;
--
-- Predicate propagation over equality conditions
--
drop schema if exists pred;
NOTICE:  schema "pred" does not exist, skipping
create schema pred;
set search_path=pred;
create table t1 (x int, y int, z int) distributed by (y);
create table t2 (x int, y int, z int) distributed by (x);
insert into t1 select i, i, i from generate_series(1,100) i;
insert into t2 select * from t1;
analyze t1;
analyze t2;
--
-- infer over equalities
--
explain select count(*) from t1,t2 where t1.x = 100 and t1.x = t2.x;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7.10..7.11 rows=1 width=8)
   ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=7.04..7.08 rows=1 width=8)
         ->  Aggregate  (cost=7.04..7.05 rows=1 width=8)
               ->  Nested Loop  (cost=0.00..7.03 rows=2 width=0)
                     ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.00..3.52 rows=1 width=4)
                           Hash Key: 100
                           ->  Seq Scan on t1  (cost=0.00..3.50 rows=1 width=4)
                                 Filter: x = 100 AND 100 = x
                     ->  Seq Scan on t2  (cost=0.00..3.50 rows=1 width=4)
                           Filter: 100 = x AND x = 100
 Settings:  enable_hashjoin=on; enable_mergejoin=off; enable_nestloop=off
(11 rows)

select count(*) from t1,t2 where t1.x = 100 and t1.x = t2.x;
 count 
-------
     1
(1 row)

--
-- infer over >=
--
explain select * from t1,t2 where t1.x = 100 and t2.x >= t1.x;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=3.28..6.58 rows=2 width=24)
   ->  Nested Loop  (cost=3.28..6.58 rows=2 width=24)
         Join Filter: t2.x >= t1.x
         ->  Seq Scan on t1  (cost=0.00..3.25 rows=1 width=12)
               Filter: x = 100
         ->  Materialize  (cost=3.28..3.30 rows=1 width=12)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..3.28 rows=1 width=12)
                     ->  Seq Scan on t2  (cost=0.00..3.25 rows=1 width=12)
                           Filter: x >= 100
 Settings:  enable_hashjoin=on; enable_mergejoin=off; enable_nestloop=off
(10 rows)

select * from t1,t2 where t1.x = 100 and t2.x >= t1.x;
  x  |  y  |  z  |  x  |  y  |  z  
-----+-----+-----+-----+-----+-----
 100 | 100 | 100 | 100 | 100 | 100
(1 row)

--
-- multiple inferences
--
set optimizer_segments=2;
explain select * from t1,t2 where t1.x = 100 and t1.x = t2.y and t1.x <= t2.x;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=3.53..7.58 rows=2 width=24)
   ->  Nested Loop  (cost=3.53..7.58 rows=2 width=24)
         Join Filter: t1.x <= t2.x
         ->  Seq Scan on t2  (cost=0.00..4.00 rows=1 width=12)
               Filter: 100 = y AND y = 100 AND 100 <= x AND y <= x
         ->  Materialize  (cost=3.53..3.55 rows=1 width=12)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..3.53 rows=1 width=12)
                     ->  Seq Scan on t1  (cost=0.00..3.50 rows=1 width=12)
                           Filter: x = 100 AND 100 = x
 Settings:  enable_hashjoin=on; enable_mergejoin=off; enable_nestloop=off
(10 rows)

reset optimizer_segments;
select * from t1,t2 where t1.x = 100 and t1.x = t2.y and t1.x <= t2.x;
  x  |  y  |  z  |  x  |  y  |  z  
-----+-----+-----+-----+-----+-----
 100 | 100 | 100 | 100 | 100 | 100
(1 row)

--
-- MPP-18537: hash clause references a constant in outer child target list
--
create table hjn_test (i int, j int) distributed by (i,j);
insert into hjn_test values(3, 4);
create table int4_tbl (f1 int);
insert into int4_tbl values(123456), (-2147483647), (0), (-123456), (2147483647);
select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar, 4) and hjn_test.j = 4;
count 
-------
    1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,(array[4])[1]) and hjn_test.j = (array[4])[1];
count 
-------
    1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where least (foo.bar,(array[4])[1]) = hjn_test.i and hjn_test.j = (array[4])[1];
count 
-------
    1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar, least(4,10)) and hjn_test.j = least(4,10);
count 
-------
    1
(1 row)

select * from int4_tbl a join int4_tbl b on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1));
     f1      |     f1      
-------------+-------------
 -2147483647 | -2147483647
      123456 |      123456
     -123456 |     -123456
           0 |           0
  2147483647 |  2147483647
(5 rows)

set enable_hashjoin to off;
-- Disable hashjoin forms fo ORCA
select disable_xform('CXformInnerJoin2HashJoin');
            disable_xform
--------------------------------------
 CXformInnerJoin2HashJoin is disabled
(1 row)

select disable_xform('CXformLeftAntiSemiJoin2HashJoin');
                disable_xform
---------------------------------------------
 CXformLeftAntiSemiJoin2HashJoin is disabled
(1 row)

select disable_xform('CXformLeftAntiSemiJoinNotIn2HashJoinNotIn');
                     disable_xform
-------------------------------------------------------
 CXformLeftAntiSemiJoinNotIn2HashJoinNotIn is disabled
(1 row)

select disable_xform('CXformLeftOuterJoin2HashJoin');
              disable_xform
------------------------------------------
 CXformLeftOuterJoin2HashJoin is disabled
(1 row)

select disable_xform('CXformLeftSemiJoin2HashJoin');
              disable_xform
-----------------------------------------
 CXformLeftSemiJoin2HashJoin is disabled
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar, 4) and hjn_test.j = 4;
count 
-------
    1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,(array[4])[1]) and hjn_test.j = (array[4])[1];
count 
-------
    1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where least (foo.bar,(array[4])[1]) = hjn_test.i and hjn_test.j = (array[4])[1];
count 
-------
    1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar, least(4,10)) and hjn_test.j = least(4,10);
count 
-------
    1
(1 row)

select * from int4_tbl a join int4_tbl b on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1));
     f1      |     f1      
-------------+-------------
 -2147483647 | -2147483647
      123456 |      123456
     -123456 |     -123456
           0 |           0
  2147483647 |  2147483647
(5 rows)

reset enable_hashjoin;
-- Enable hashjoin forms fo ORCA
select enable_xform('CXformInnerJoin2HashJoin');
            enable_xform
-------------------------------------
 CXformInnerJoin2HashJoin is enabled
(1 row)

select enable_xform('CXformLeftAntiSemiJoin2HashJoin');
                enable_xform
--------------------------------------------
 CXformLeftAntiSemiJoin2HashJoin is enabled
(1 row)

select enable_xform('CXformLeftAntiSemiJoinNotIn2HashJoinNotIn');
                     enable_xform
------------------------------------------------------
 CXformLeftAntiSemiJoinNotIn2HashJoinNotIn is enabled
(1 row)

select enable_xform('CXformLeftOuterJoin2HashJoin');
              enable_xform
-----------------------------------------
 CXformLeftOuterJoin2HashJoin is enabled
(1 row)

select enable_xform('CXformLeftSemiJoin2HashJoin');
              enable_xform
----------------------------------------
 CXformLeftSemiJoin2HashJoin is enabled
(1 row)

drop schema pred cascade;
NOTICE:  drop cascades to table int4_tbl
NOTICE:  drop cascades to table hjn_test
NOTICE:  drop cascades to table t2
NOTICE:  drop cascades to table t1
-- test the scenario that the nestloop/merge join is in a subquery and the
-- parameter passed to the outer of the join. We should not squelch the inner
-- if the outer doesn't return a qualified tuple, because squelch the inner
-- would stop the motion and when the next parameter comes in, the inner rescan
-- can't get the correct data.
reset search_path;
set optimizer=off;
create table t_join_squelch_a (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_join_squelch_a values (2, 2);
create table t_join_squelch_b (x int, y int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_join_squelch_b values (2, 2);
create table t_join_squelch_c(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_join_squelch_c values (1), (2);
analyze t_join_squelch_a;
analyze t_join_squelch_b;
analyze t_join_squelch_c;
set enable_nestloop to on;
set enable_hashjoin to off;
set enable_mergejoin to off;
explain select (select count(*) from (select 'random' from t_join_squelch_a a join t_join_squelch_b b on a.a = b.x and a.b = c.i) x)d from t_join_squelch_c c;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..5.26 rows=2 width=4)
   ->  Seq Scan on t_join_squelch_c c  (cost=0.00..5.26 rows=1 width=4)
         SubPlan 1
           ->  Aggregate  (cost=2.11..2.12 rows=1 width=8)
                 ->  Aggregate  (cost=2.05..2.06 rows=1 width=8)
                       ->  Nested Loop  (cost=0.00..2.04 rows=2 width=0)
                             Join Filter: a.a = b.x
                             ->  Result  (cost=1.01..1.02 rows=1 width=4)
                                   Filter: a.b = $0
                                   ->  Materialize  (cost=1.01..1.02 rows=1 width=4)
                                         ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..1.01 rows=1 width=4)
                                               ->  Seq Scan on t_join_squelch_a a  (cost=0.00..1.01 rows=1 width=4)
                             ->  Result  (cost=1.01..1.02 rows=1 width=4)
                                   ->  Materialize  (cost=1.01..1.02 rows=1 width=4)
                                         ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..1.01 rows=1 width=4)
                                               ->  Seq Scan on t_join_squelch_b b  (cost=0.00..1.01 rows=1 width=4)
 Settings:  enable_hashjoin=off; enable_mergejoin=off; enable_nestloop=on; optimizer=off
 Optimizer status: legacy query optimizer
(18 rows)

select (select count(*) from (select 'random' from t_join_squelch_a a join t_join_squelch_b b on a.a = b.x and a.b = c.i) x)d from t_join_squelch_c c;
 d 
---
 0
 1
(2 rows)

set enable_nestloop to off;
set enable_hashjoin to off;
set enable_mergejoin to on;
explain select (select count(*) from (select 'random' from t_join_squelch_a a join t_join_squelch_b b on a.a = b.x and a.b = c.i) x)d from t_join_squelch_c c;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..5.33 rows=2 width=4)
   ->  Seq Scan on t_join_squelch_c c  (cost=0.00..5.33 rows=1 width=4)
         SubPlan 1
           ->  Aggregate  (cost=2.14..2.15 rows=1 width=8)
                 ->  Aggregate  (cost=2.08..2.09 rows=1 width=8)
                       ->  Merge Join  (cost=2.04..2.07 rows=2 width=0)
                             Merge Cond: a.a = b.x
                             ->  Sort  (cost=1.02..1.03 rows=1 width=4)
                                   Sort Key: a.a
                                   ->  Result  (cost=1.01..1.02 rows=1 width=4)
                                         Filter: a.b = $0
                                         ->  Materialize  (cost=1.01..1.02 rows=1 width=4)
                                               ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..1.01 rows=1 width=4)
                                                     ->  Seq Scan on t_join_squelch_a a  (cost=0.00..1.01 rows=1 width=4)
                             ->  Sort  (cost=1.02..1.02 rows=1 width=4)
                                   Sort Key: b.x
                                   ->  Result  (cost=1.01..1.02 rows=1 width=4)
                                         ->  Materialize  (cost=1.01..1.02 rows=1 width=4)
                                               ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..1.01 rows=1 width=4)
                                                     ->  Seq Scan on t_join_squelch_b b  (cost=0.00..1.01 rows=1 width=4)
 Settings:  enable_hashjoin=off; enable_mergejoin=on; enable_nestloop=off; optimizer=off
 Optimizer status: legacy query optimizer
(22 rows)

select (select count(*) from (select 'random' from t_join_squelch_a a join t_join_squelch_b b on a.a = b.x and a.b = c.i) x)d from t_join_squelch_c c;
 d 
---
 0
 1
(2 rows)

drop table t_join_squelch_a, t_join_squelch_b, t_join_squelch_c;
reset enable_nestloop;
reset enable_hashjoin;
reset enable_mergejoin;
reset optimizer;
