--
-- UNION (also INTERSECT, EXCEPT)
--
-- Simple UNION constructs
SELECT 1 AS two UNION SELECT 2;
 two 
-----
   1
   2
(2 rows)

SELECT 1 AS one UNION SELECT 1;
 one 
-----
   1
(1 row)

SELECT 1 AS two UNION ALL SELECT 2;
 two 
-----
   1
   2
(2 rows)

SELECT 1 AS two UNION ALL SELECT 1;
 two 
-----
   1
   1
(2 rows)

SELECT 1 AS three UNION SELECT 2 UNION SELECT 3;
 three 
-------
     1
     2
     3
(3 rows)

SELECT 1 AS two UNION SELECT 2 UNION SELECT 2;
 two 
-----
   1
   2
(2 rows)

SELECT 1 AS three UNION SELECT 2 UNION ALL SELECT 2;
 three 
-------
     1
     2
     2
(3 rows)

SELECT 1.1 AS two UNION SELECT 2.2;
 two 
-----
 1.1
 2.2
(2 rows)

-- Mixed types
SELECT 1.1 AS two UNION SELECT 2;
 two 
-----
 1.1
   2
(2 rows)

SELECT 1 AS two UNION SELECT 2.2;
 two 
-----
   1
 2.2
(2 rows)

SELECT 1 AS one UNION SELECT 1.0::float8;
 one 
-----
   1
(1 row)

SELECT 1.1 AS two UNION ALL SELECT 2;
 two 
-----
 1.1
   2
(2 rows)

SELECT 1.0::float8 AS two UNION ALL SELECT 1;
 two 
-----
   1
   1
(2 rows)

SELECT 1.1 AS three UNION SELECT 2 UNION SELECT 3;
 three 
-------
   1.1
     2
     3
(3 rows)

SELECT 1.1::float8 AS two UNION SELECT 2 UNION SELECT 2.0::float8;
 two 
-----
 1.1
   2
(2 rows)

SELECT 1.1 AS three UNION SELECT 2 UNION ALL SELECT 2;
 three 
-------
   1.1
     2
     2
(3 rows)

SELECT 1.1 AS two UNION (SELECT 2 UNION ALL SELECT 2);
 two 
-----
 1.1
   2
(2 rows)

--
-- Try testing from tables...
--
SELECT f1 AS five FROM FLOAT8_TBL
UNION
SELECT f1 FROM FLOAT8_TBL ORDER BY 1;
         five          
-----------------------
 -1.2345678901234e+200
               -1004.3
                -34.84
 -1.2345678901234e-200
                     0
(5 rows)

SELECT f1 AS ten FROM FLOAT8_TBL
UNION ALL
SELECT f1 FROM FLOAT8_TBL ORDER BY 1;
          ten          
-----------------------
 -1.2345678901234e+200
 -1.2345678901234e+200
               -1004.3
               -1004.3
                -34.84
                -34.84
 -1.2345678901234e-200
 -1.2345678901234e-200
                     0
                     0
(10 rows)

SELECT f1 AS nine FROM FLOAT8_TBL
UNION
SELECT f1 FROM INT4_TBL ORDER BY 1;
         nine          
-----------------------
 -1.2345678901234e+200
           -2147483647
               -123456
               -1004.3
                -34.84
 -1.2345678901234e-200
                     0
                123456
            2147483647
(9 rows)

SELECT f1 AS ten FROM FLOAT8_TBL
UNION ALL
SELECT f1 FROM INT4_TBL ORDER BY 1;
          ten          
-----------------------
 -1.2345678901234e+200
           -2147483647
               -123456
               -1004.3
                -34.84
 -1.2345678901234e-200
                     0
                     0
                123456
            2147483647
(10 rows)

SELECT f1 AS five FROM FLOAT8_TBL
  WHERE f1 BETWEEN -1e6 AND 1e6
UNION
SELECT f1 FROM INT4_TBL
  WHERE f1 BETWEEN 0 AND 1000000 ORDER BY 1;
         five          
-----------------------
               -1004.3
                -34.84
 -1.2345678901234e-200
                     0
                123456
(5 rows)

SELECT CAST(f1 AS char(4)) AS three FROM VARCHAR_TBL
UNION
SELECT f1 FROM CHAR_TBL ORDER BY 1;
 three 
-------
 a   
 ab  
 abcd
(3 rows)

SELECT f1 AS three FROM VARCHAR_TBL
UNION
SELECT CAST(f1 AS varchar) FROM CHAR_TBL ORDER BY 1;
 three 
-------
 a
 ab
 abcd
(3 rows)

SELECT f1 AS eight FROM VARCHAR_TBL
UNION ALL
SELECT f1 FROM CHAR_TBL ORDER BY 1;
 eight 
-------
 a
 a
 ab
 ab
 abcd
 abcd
 abcd
 abcd
(8 rows)

SELECT f1 AS five FROM TEXT_TBL
UNION
SELECT f1 FROM VARCHAR_TBL
UNION
SELECT TRIM(TRAILING FROM f1) FROM CHAR_TBL ORDER BY 1;
       five        
-------------------
 a
 ab
 abcd
 doh!
 hi de ho neighbor
(5 rows)

--
-- INTERSECT and EXCEPT
--
SELECT q2 FROM int8_tbl INTERSECT SELECT q1 FROM int8_tbl ORDER BY 1;
        q2        
------------------
              123
 4567890123456789
(2 rows)

SELECT q2 FROM int8_tbl INTERSECT ALL SELECT q1 FROM int8_tbl ORDER BY 1;
        q2        
------------------
              123
 4567890123456789
 4567890123456789
(3 rows)

SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
        q2         
-------------------
 -4567890123456789
               456
(2 rows)

SELECT q2 FROM int8_tbl EXCEPT ALL SELECT q1 FROM int8_tbl ORDER BY 1;
        q2         
-------------------
 -4567890123456789
               456
(2 rows)

SELECT q2 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q1 FROM int8_tbl ORDER BY 1;
        q2         
-------------------
 -4567890123456789
               456
  4567890123456789
(3 rows)

SELECT q1 FROM int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY 1;
 q1 
----
(0 rows)

SELECT q1 FROM int8_tbl EXCEPT ALL SELECT q2 FROM int8_tbl ORDER BY 1;
        q1        
------------------
              123
 4567890123456789
(2 rows)

SELECT q1 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q2 FROM int8_tbl ORDER BY 1;
        q1        
------------------
              123
 4567890123456789
 4567890123456789
(3 rows)

--
-- Mixed types
--
SELECT f1 FROM float8_tbl INTERSECT SELECT f1 FROM int4_tbl ORDER BY 1;
 f1 
----
  0
(1 row)

SELECT f1 FROM float8_tbl EXCEPT SELECT f1 FROM int4_tbl ORDER BY 1;
          f1           
-----------------------
 -1.2345678901234e+200
               -1004.3
                -34.84
 -1.2345678901234e-200
(4 rows)

--
-- Operator precedence and (((((extra))))) parentheses
--
SELECT q1 FROM int8_tbl INTERSECT SELECT q2 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl ORDER BY 1;
        q1         
-------------------
 -4567890123456789
               123
               123
               456
  4567890123456789
  4567890123456789
  4567890123456789
(7 rows)

SELECT q1 FROM int8_tbl INTERSECT (((SELECT q2 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl))) ORDER BY 1;
        q1        
------------------
              123
 4567890123456789
(2 rows)

(((SELECT q1 FROM int8_tbl INTERSECT SELECT q2 FROM int8_tbl))) UNION ALL SELECT q2 FROM int8_tbl ORDER BY 1;
        q1         
-------------------
 -4567890123456789
               123
               123
               456
  4567890123456789
  4567890123456789
  4567890123456789
(7 rows)

SELECT q1 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
        q1         
-------------------
 -4567890123456789
               456
(2 rows)

SELECT q1 FROM int8_tbl UNION ALL (((SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl))) ORDER BY 1;
        q1         
-------------------
 -4567890123456789
               123
               123
               456
  4567890123456789
  4567890123456789
  4567890123456789
(7 rows)

(((SELECT q1 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl))) EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
        q1         
-------------------
 -4567890123456789
               456
(2 rows)

--
-- Subqueries with ORDER BY & LIMIT clauses
--
-- In this syntax, ORDER BY/LIMIT apply to the result of the EXCEPT
SELECT q1,q2 FROM int8_tbl EXCEPT SELECT q2,q1 FROM int8_tbl
ORDER BY q2,q1;
        q1        |        q2         
------------------+-------------------
 4567890123456789 | -4567890123456789
              123 |               456
(2 rows)

-- This should fail, because q2 isn't a name of an EXCEPT output column
SELECT q1 FROM int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1;
ERROR:  column "q2" does not exist
LINE 1: ... int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1...
                                                             ^
-- But this should work:
SELECT q1 FROM int8_tbl EXCEPT (((SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1))) ORDER BY 1;
        q1        
------------------
              123
 4567890123456789
(2 rows)

--
-- New syntaxes (7.1) permit new tests
--
(((((select * from int8_tbl))))) ORDER BY 1,2;
        q1        |        q2         
------------------+-------------------
              123 |               456
              123 |  4567890123456789
 4567890123456789 | -4567890123456789
 4567890123456789 |               123
 4567890123456789 |  4567890123456789
(5 rows)

create temp table t_union1 (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select distinct a, null as c from t_union1 union select a, b from t_union1;
 a | c 
---+---
(0 rows)

drop table t_union1;
select null union select distinct null;
 ?column? 
----------
 
(1 row)

select 1 union select distinct null;
 ?column? 
----------
        1
         
(2 rows)

select 1 a, NULL b, NULL c UNION SELECT 2, 3, NULL UNION SELECT 3, NULL, 4;
 a | b | c 
---+---+---
 1 |   |  
 2 | 3 |  
 3 |   | 4
(3 rows)

select ARRAY[1, 2, 3] union select distinct null;
  array  
---------
 {1,2,3}
 
(2 rows)

select 1 intersect (select 1, 2 union all select 3, 4);
ERROR:  each INTERSECT query must have the same number of columns
select 1 a, row_number() over (partition by 'a') union all (select 1 a , 2 b);
 a | row_number 
---+------------
 1 |          1
 1 |          2
(2 rows)

-- This can preserve domain types, but we keep compatibility for now
-- See MPP-7509
select pg_typeof(a) from (select 'a'::information_schema.sql_identifier a union all
select 'b'::information_schema.sql_identifier)a;
     pg_typeof     
-------------------
 character varying
 character varying
(2 rows)

(select * from (
     (select '1' as a union select null)
     union
     (select 1 union select distinct null)
   )s)
  union
  (select * from (
     (select '1' union select null)
     union
     (select 1 union select distinct null)
  )s2);
 a 
---
 1
  
(2 rows)

-- Yet, we keep behaviors on text-like columns
select pg_typeof(a) from(select 'foo' a union select 'foo'::name)s;
 pg_typeof 
-----------
 name
(1 row)

select pg_typeof(a) from(select 1 x, 'foo' a union
    select 1, 'foo' union select 1, 'foo'::name)s;
 pg_typeof 
-----------
 text
(1 row)

select pg_typeof(a) from(select 1 x, 'foo' a union
    (select 1, 'foo' union select 1, 'foo'::name))s;
 pg_typeof 
-----------
 name
(1 row)

CREATE TABLE union_ctas (a, b) AS SELECT 1, 2 UNION SELECT 1, 1 UNION SELECT 1, 1;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT * FROM union_ctas;
 a | b 
---+---
 1 | 1
 1 | 2
(2 rows)

DROP TABLE union_ctas;
-- MPP-21075: push quals below union
CREATE TABLE union_quals1 (a, b) AS SELECT i, i%2 from generate_series(1,10) i;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE union_quals2 (a, b) AS SELECT i%2, i from generate_series(1,10) i;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT * FROM (SELECT a, b from union_quals1 UNION SELECT b, a from union_quals2) as foo(a,b) where a > b order by a;
 a  | b 
----+---
  2 | 0
  3 | 1
  4 | 0
  5 | 1
  6 | 0
  7 | 1
  8 | 0
  9 | 1
 10 | 0
(9 rows)

SELECT * FROM (SELECT a, max(b) over() from union_quals1 UNION SELECT * from union_quals2) as foo(a,b) where b > 6 order by a,b;
 a | b  
---+----
 0 |  8
 0 | 10
 1 |  7
 1 |  9
(4 rows)

-- MPP-22266: different combinations of set operations and distinct
select * from ((select 1, 'A' from (select distinct 'B') as foo) union (select 1, 'C')) as bar;
 ?column? | ?column? 
----------+----------
        1 | A
        1 | C
(2 rows)

select 1 union (select distinct null union select '10');
 ?column? 
----------
        1
       10
         
(3 rows)

select 1 union (select 2 from (select distinct null union select 1) as x);
 ?column? 
----------
        1
        2
(2 rows)

select 1 union (select distinct '10' from (select 1, 3.0 union select distinct 2, null) as foo);
 ?column? 
----------
        1
       10
(2 rows)

select distinct a from (select 'A' union select 'B') as foo(a);
 a 
---
 A
 B
(2 rows)

select distinct a from (select distinct 'A' union select 'B') as foo(a);
 a 
---
 A
 B
(2 rows)

select distinct a from (select distinct 'A' union select distinct 'B') as foo(a);
 a 
---
 A
 B
(2 rows)

select distinct a from (select  'A' from (select distinct 'C' ) as bar union select distinct 'B') as foo(a);
 a 
---
 A
 B
(2 rows)

select distinct a from (select  distinct 'A' from (select distinct 'C' ) as bar union select distinct 'B') as foo(a);
 a 
---
 A
 B
(2 rows)

select distinct a from (select  distinct 'A' from (select 'C' from (select distinct 'D') as bar1 ) as bar union select distinct 'B') as foo(a);
 a 
---
 A
 B
(2 rows)

--
-- Setup
--
--start_ignore
DROP TABLE IF EXISTS T_a1 CASCADE;
NOTICE:  table "t_a1" does not exist, skipping
DROP TABLE IF EXISTS T_b2 CASCADE;
NOTICE:  table "t_b2" does not exist, skipping
DROP TABLE IF EXISTS T_random CASCADE;
NOTICE:  table "t_random" does not exist, skipping
--end_ignore
CREATE TABLE T_a1 (a1 int, a2 int) DISTRIBUTED BY(a1);
INSERT INTO T_a1 SELECT i, i%5 from generate_series(1,10) i;
CREATE TABLE T_b2 (b1 int, b2 int) DISTRIBUTED BY(b2);
INSERT INTO T_b2 SELECT i, i%5 from generate_series(1,20) i;
CREATE TABLE T_random (c1 int, c2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO T_random SELECT i, i%5 from generate_series(1,30) i;
create language plpythonu;
ERROR:  language "plpythonu" already exists
create or replace function count_operator(explain_query text, operator text) returns int as
$$
rv = plpy.execute(explain_query)
search_text = operator
result = 0
for i in range(len(rv)):
    cur_line = rv[i]['QUERY PLAN']
    if search_text.lower() in cur_line.lower():
        result = result+1
return result
$$
language plpythonu;
set optimizer = on;
--
-- N-ary UNION ALL results
-- @optimizer_mode on
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
UNION ALL
(select c1 from T_random)
UNION ALL
(select d1 from T_constant)
order by 1;
 a1  
-----
   1
   1
   1
   2
   2
   2
   3
   3
   3
   4
   4
   4
   5
   5
   5
   6
   6
   6
   7
   7
   7
   8
   8
   8
   9
   9
   9
  10
  10
  10
  11
  11
  12
  12
  13
  13
  14
  14
  15
  15
  16
  16
  17
  17
  18
  18
  19
  19
  20
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(63 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select b1 from T_b2)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select c1 from T_random)
UNION ALL
(select d1 from T_constant)
order by 1;
 b1  
-----
   1
   1
   1
   2
   2
   2
   3
   3
   3
   4
   4
   4
   5
   5
   5
   6
   6
   6
   7
   7
   7
   8
   8
   8
   9
   9
   9
  10
  10
  10
  11
  11
  12
  12
  13
  13
  14
  14
  15
  15
  16
  16
  17
  17
  18
  18
  19
  19
  20
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(63 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select c1 from T_random)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
UNION ALL
(select d1 from T_constant)
order by 1;
 c1  
-----
   1
   1
   1
   2
   2
   2
   3
   3
   3
   4
   4
   4
   5
   5
   5
   6
   6
   6
   7
   7
   7
   8
   8
   8
   9
   9
   9
  10
  10
  10
  11
  11
  12
  12
  13
  13
  14
  14
  15
  15
  16
  16
  17
  17
  18
  18
  19
  19
  20
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(63 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant)
UNION ALL
(select c1 from T_random)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
order by 1;
 d1  
-----
   1
   1
   1
   2
   2
   2
   3
   3
   3
   4
   4
   4
   5
   5
   5
   6
   6
   6
   7
   7
   7
   8
   8
   8
   9
   9
   9
  10
  10
  10
  11
  11
  12
  12
  13
  13
  14
  14
  15
  15
  16
  16
  17
  17
  18
  18
  19
  19
  20
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(63 rows)

--
-- N-ary UNION ALL explain
-- @optimizer_mode on
select count_operator('
explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
UNION ALL
(select c1 from T_random)
UNION ALL
(select d1 from T_constant)
order by 1;'
, 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('
explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select b1 from T_b2)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select c1 from T_random)
UNION ALL
(select d1 from T_constant)
order by 1;'
, 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('
explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select c1 from T_random)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
UNION ALL
(select d1 from T_constant)
order by 1;'
, 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('
explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant)
UNION ALL
(select c1 from T_random)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
order by 1;'
, 'APPEND');
 count_operator 
----------------
              2
(1 row)

--
-- N-ary UNION results
-- @optimizer_mode on
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select a1 from T_a1)
UNION
(select b1 from T_b2)
UNION
(select c1 from T_random)
UNION
(select d1 from T_constant)
order by 1;
 a1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select b1 from T_b2)
UNION
(select a1 from T_a1)
UNION
(select c1 from T_random)
UNION ALL
(select d1 from T_constant)
order by 1;
 b1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select c1 from T_random)
UNION
(select a1 from T_a1)
UNION
(select b1 from T_b2)
UNION ALL
(select d1 from T_constant)
order by 1;
 c1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant)
UNION ALL
(select c1 from T_random)
UNION
(select a1 from T_a1)
UNION
(select b1 from T_b2)
order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

--
-- N-ary UNION explain
-- @optimizer_mode on
select count_operator('
explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select a1 from T_a1)
UNION
(select b1 from T_b2)
UNION
(select c1 from T_random)
UNION
(select d1 from T_constant)
order by 1;'
, 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('
explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select b1 from T_b2)
UNION
(select a1 from T_a1)
UNION
(select c1 from T_random)
UNION
(select d1 from T_constant)
order by 1;'
, 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('
explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select c1 from T_random)
UNION
(select a1 from T_a1)
UNION
(select b1 from T_b2)
UNION
(select d1 from T_constant)
order by 1;'
, 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('
explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant)
UNION
(select c1 from T_random)
UNION
(select a1 from T_a1)
UNION
(select b1 from T_b2)
order by 1;'
, 'APPEND');
 count_operator 
----------------
              2
(1 row)

--
-- Binary UNION ALL results
-- @optimizer_mode on
(select a1 from T_a1) UNION ALL (select b1 from T_b2) order by 1;
 a1 
----
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
  6
  6
  7
  7
  8
  8
  9
  9
 10
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
(30 rows)

(select b1 from T_b2) UNION ALL (select a1 from T_a1) order by 1;
 b1 
----
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
  6
  6
  7
  7
  8
  8
  9
  9
 10
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
(30 rows)

(select a1 from T_a1) UNION ALL (select c1 from T_random) order by 1;
 a1 
----
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
  6
  6
  7
  7
  8
  8
  9
  9
 10
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
(40 rows)

(select c1 from T_random) UNION ALL (select a1 from T_a1) order by 1;
 c1 
----
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
  6
  6
  7
  7
  8
  8
  9
  9
 10
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
(40 rows)

(select * from T_a1) UNION ALL (select * from T_b2) order by 1;
 a1 | a2 
----+----
  1 |  1
  1 |  1
  2 |  2
  2 |  2
  3 |  3
  3 |  3
  4 |  4
  4 |  4
  5 |  0
  5 |  0
  6 |  1
  6 |  1
  7 |  2
  7 |  2
  8 |  3
  8 |  3
  9 |  4
  9 |  4
 10 |  0
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
(30 rows)

(select * from T_a1) UNION ALL (select * from T_random) order by 1;
 a1 | a2 
----+----
  1 |  1
  1 |  1
  2 |  2
  2 |  2
  3 |  3
  3 |  3
  4 |  4
  4 |  4
  5 |  0
  5 |  0
  6 |  1
  6 |  1
  7 |  2
  7 |  2
  8 |  3
  8 |  3
  9 |  4
  9 |  4
 10 |  0
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
 21 |  1
 22 |  2
 23 |  3
 24 |  4
 25 |  0
 26 |  1
 27 |  2
 28 |  3
 29 |  4
 30 |  0
(40 rows)

(select * from T_b2) UNION ALL (select * from T_random) order by 1;
 b1 | b2 
----+----
  1 |  1
  1 |  1
  2 |  2
  2 |  2
  3 |  3
  3 |  3
  4 |  4
  4 |  4
  5 |  0
  5 |  0
  6 |  1
  6 |  1
  7 |  2
  7 |  2
  8 |  3
  8 |  3
  9 |  4
  9 |  4
 10 |  0
 10 |  0
 11 |  1
 11 |  1
 12 |  2
 12 |  2
 13 |  3
 13 |  3
 14 |  4
 14 |  4
 15 |  0
 15 |  0
 16 |  1
 16 |  1
 17 |  2
 17 |  2
 18 |  3
 18 |  3
 19 |  4
 19 |  4
 20 |  0
 20 |  0
 21 |  1
 22 |  2
 23 |  3
 24 |  4
 25 |  0
 26 |  1
 27 |  2
 28 |  3
 29 |  4
 30 |  0
(50 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select a1 from T_a1) UNION ALL (select d1 from T_constant) order by 1;
 a1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
 200
 300
(13 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant) UNION ALL (select a1 from T_a1) order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
 200
 300
(13 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select c1 from T_random) UNION ALL (select d1 from T_constant) order by 1;
 c1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant) UNION ALL (select c1 from T_random) order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

--
-- Binary UNION ALL explain
-- @optimizer_mode on
select count_operator('explain (select a1 from T_a1) UNION ALL (select b1 from T_b2) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select b1 from T_b2) UNION ALL (select a1 from T_a1) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select a1 from T_a1) UNION ALL (select c1 from T_random) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select c1 from T_random) UNION ALL (select a1 from T_a1) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select * from T_a1) UNION ALL (select * from T_b2) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select * from T_a1) UNION ALL (select * from T_random) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select * from T_b2) UNION ALL (select * from T_random) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select a1 from T_a1) UNION ALL (select d1 from T_constant) order by 1;', 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant) UNION ALL (select a1 from T_a1) order by 1;', 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select c1 from T_random) UNION ALL (select d1 from T_constant) order by 1;', 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('explain with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant) UNION ALL (select c1 from T_random) order by 1;', 'APPEND');
 count_operator 
----------------
              2
(1 row)

--
-- Binary UNION results
-- @optimizer_mode on
(select a1 from T_a1) UNION (select b1 from T_b2) order by 1;
 a1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
(20 rows)

(select b1 from T_b2) UNION (select a1 from T_a1) order by 1;
 b1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
(20 rows)

(select a1 from T_a1) UNION (select c1 from T_random) order by 1;
 a1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
(30 rows)

(select c1 from T_random) UNION (select a1 from T_a1) order by 1;
 c1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
(30 rows)

(select * from T_a1) UNION (select * from T_b2) order by 1;
 a1 | a2 
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  0
  6 |  1
  7 |  2
  8 |  3
  9 |  4
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
(20 rows)

(select * from T_a1) UNION (select * from T_random) order by 1;
 a1 | a2 
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  0
  6 |  1
  7 |  2
  8 |  3
  9 |  4
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
 21 |  1
 22 |  2
 23 |  3
 24 |  4
 25 |  0
 26 |  1
 27 |  2
 28 |  3
 29 |  4
 30 |  0
(30 rows)

(select * from T_b2) UNION (select * from T_random) order by 1;
 b1 | b2 
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  0
  6 |  1
  7 |  2
  8 |  3
  9 |  4
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
 21 |  1
 22 |  2
 23 |  3
 24 |  4
 25 |  0
 26 |  1
 27 |  2
 28 |  3
 29 |  4
 30 |  0
(30 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select a1 from T_a1) UNION (select d1 from T_constant) order by 1;
 a1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
 200
 300
(13 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant) UNION (select a1 from T_a1) order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
 200
 300
(13 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select c1 from T_random) UNION (select d1 from T_constant) order by 1;
 c1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant) UNION (select c1 from T_random) order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

--
-- Binary UNION explain
-- @optimizer_mode on
select count_operator('explain (select a1 from T_a1) UNION (select b1 from T_b2) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select b1 from T_b2) UNION (select a1 from T_a1) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select a1 from T_a1) UNION (select c1 from T_random) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select c1 from T_random) UNION (select a1 from T_a1) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select * from T_a1) UNION (select * from T_b2) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select * from T_a1) UNION (select * from T_random) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain (select * from T_b2) UNION (select * from T_random) order by 1;', 'APPEND');
 count_operator 
----------------
              1
(1 row)

select count_operator('explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select a1 from T_a1) UNION (select d1 from T_constant) order by 1;', 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant) UNION (select a1 from T_a1) order by 1;', 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('explain
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select c1 from T_random) UNION (select d1 from T_constant) order by 1;', 'APPEND');
 count_operator 
----------------
              2
(1 row)

select count_operator('explain with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant) UNION (select c1 from T_random) order by 1;', 'APPEND');
 count_operator 
----------------
              2
(1 row)

-- Test that we push quals into UNION sub-selects only when it's safe
-- @optimizer_mode on
explain
SELECT * FROM
  (SELECT 1 AS t, 2 AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4;
                         QUERY PLAN                         
------------------------------------------------------------
 Append  (cost=0.00..0.00 rows=1 width=8)
   ->  Result  (cost=0.00..0.00 rows=1 width=8)
         Filter: x < 4
         ->  Result  (cost=0.00..0.00 rows=1 width=8)
               ->  Result  (cost=0.00..0.00 rows=1 width=1)
   ->  Result  (cost=0.00..0.00 rows=0 width=8)
         ->  Result  (cost=0.00..0.00 rows=0 width=8)
               One-Time Filter: false
 Settings:  optimizer=on
 Optimizer status: PQO version 2.80.3
(10 rows)

SELECT * FROM
  (SELECT 1 AS t, 2 AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4;
 t | x 
---+---
 1 | 2
(1 row)

explain
SELECT * FROM
  (SELECT 1 AS t, generate_series(1,10) AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 GroupAggregate  (cost=0.00..0.00 rows=1 width=8)
   Group By: t, x
   ->  GroupAggregate  (cost=0.00..0.00 rows=1 width=8)
         Group By: t, x
         ->  Sort  (cost=0.00..0.00 rows=1 width=8)
               Sort Key: x, t
               ->  Append  (cost=0.00..0.00 rows=1 width=8)
                     ->  Result  (cost=0.00..0.00 rows=1 width=8)
                           Filter: x < 4
                           ->  Result  (cost=0.00..0.00 rows=1 width=8)
                                 ->  Result  (cost=0.00..0.00 rows=1 width=1)
                     ->  Result  (cost=0.00..0.00 rows=0 width=8)
                           ->  Result  (cost=0.00..0.00 rows=0 width=8)
                                 One-Time Filter: false
 Settings:  optimizer=on
 Optimizer status: PQO version 2.80.3
(16 rows)

SELECT * FROM
  (SELECT 1 AS t, generate_series(1,10) AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
 t | x 
---+---
 1 | 1
 1 | 2
 1 | 3
(3 rows)

explain
SELECT * FROM
  (SELECT 1 AS t, (random()*3)::int AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x > 3;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Subquery Scan ss  (cost=0.07..0.11 rows=1 width=8)
   Filter: x > 3
   ->  Unique  (cost=0.07..0.08 rows=1 width=0)
         Group By: t, x
         ->  Sort  (cost=0.07..0.07 rows=1 width=0)
               Sort Key (Distinct): t, x
               ->  Append  (cost=0.01..0.06 rows=1 width=0)
                     ->  Result  (cost=0.01..0.03 rows=1 width=0)
                           InitPlan
                             ->  Result  (cost=0.00..0.01 rows=1 width=0)
                     ->  Result  (cost=0.00..0.01 rows=1 width=0)
 Settings:  optimizer=on
 Optimizer status: legacy query optimizer
(13 rows)

SELECT * FROM
  (SELECT 1 AS t, (random()*3)::int AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x > 3;
 t | x 
---+---
 2 | 4
(1 row)

set optimizer = off;
--
-- N-ary UNION ALL results
-- @optimizer_mode off
with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
UNION ALL
(select c1 from T_random)
UNION ALL
(select d1 from T_constant)
order by 1;
 a1  
-----
   1
   1
   1
   2
   2
   2
   3
   3
   3
   4
   4
   4
   5
   5
   5
   6
   6
   6
   7
   7
   7
   8
   8
   8
   9
   9
   9
  10
  10
  10
  11
  11
  12
  12
  13
  13
  14
  14
  15
  15
  16
  16
  17
  17
  18
  18
  19
  19
  20
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(63 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select b1 from T_b2)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select c1 from T_random)
UNION ALL
(select d1 from T_constant)
order by 1;
 b1  
-----
   1
   1
   1
   2
   2
   2
   3
   3
   3
   4
   4
   4
   5
   5
   5
   6
   6
   6
   7
   7
   7
   8
   8
   8
   9
   9
   9
  10
  10
  10
  11
  11
  12
  12
  13
  13
  14
  14
  15
  15
  16
  16
  17
  17
  18
  18
  19
  19
  20
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(63 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select c1 from T_random)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
UNION ALL
(select d1 from T_constant)
order by 1;
 c1  
-----
   1
   1
   1
   2
   2
   2
   3
   3
   3
   4
   4
   4
   5
   5
   5
   6
   6
   6
   7
   7
   7
   8
   8
   8
   9
   9
   9
  10
  10
  10
  11
  11
  12
  12
  13
  13
  14
  14
  15
  15
  16
  16
  17
  17
  18
  18
  19
  19
  20
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(63 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant)
UNION ALL
(select c1 from T_random)
UNION ALL
(select a1 from T_a1)
UNION ALL
(select b1 from T_b2)
order by 1;
 d1  
-----
   1
   1
   1
   2
   2
   2
   3
   3
   3
   4
   4
   4
   5
   5
   5
   6
   6
   6
   7
   7
   7
   8
   8
   8
   9
   9
   9
  10
  10
  10
  11
  11
  12
  12
  13
  13
  14
  14
  15
  15
  16
  16
  17
  17
  18
  18
  19
  19
  20
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(63 rows)

--
-- N-ary UNION results
-- @optimizer_mode off
with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select a1 from T_a1)
UNION
(select b1 from T_b2)
UNION
(select c1 from T_random)
UNION
(select d1 from T_constant)
order by 1;
 a1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select b1 from T_b2)
UNION
(select a1 from T_a1)
UNION
(select c1 from T_random)
UNION ALL
(select d1 from T_constant)
order by 1;
 b1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select c1 from T_random)
UNION
(select a1 from T_a1)
UNION
(select b1 from T_b2)
UNION ALL
(select d1 from T_constant)
order by 1;
 c1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant)
UNION ALL
(select c1 from T_random)
UNION
(select a1 from T_a1)
UNION
(select b1 from T_b2)
order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

--
-- Binary UNION ALL results
-- @optimizer_mode off
(select a1 from T_a1) UNION ALL (select b1 from T_b2) order by 1;
 a1 
----
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
  6
  6
  7
  7
  8
  8
  9
  9
 10
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
(30 rows)

(select b1 from T_b2) UNION ALL (select a1 from T_a1) order by 1;
 b1 
----
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
  6
  6
  7
  7
  8
  8
  9
  9
 10
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
(30 rows)

(select a1 from T_a1) UNION ALL (select c1 from T_random) order by 1;
 a1 
----
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
  6
  6
  7
  7
  8
  8
  9
  9
 10
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
(40 rows)

(select c1 from T_random) UNION ALL (select a1 from T_a1) order by 1;
 c1 
----
  1
  1
  2
  2
  3
  3
  4
  4
  5
  5
  6
  6
  7
  7
  8
  8
  9
  9
 10
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
(40 rows)

(select * from T_a1) UNION ALL (select * from T_b2) order by 1;
 a1 | a2 
----+----
  1 |  1
  1 |  1
  2 |  2
  2 |  2
  3 |  3
  3 |  3
  4 |  4
  4 |  4
  5 |  0
  5 |  0
  6 |  1
  6 |  1
  7 |  2
  7 |  2
  8 |  3
  8 |  3
  9 |  4
  9 |  4
 10 |  0
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
(30 rows)

(select * from T_a1) UNION ALL (select * from T_random) order by 1;
 a1 | a2 
----+----
  1 |  1
  1 |  1
  2 |  2
  2 |  2
  3 |  3
  3 |  3
  4 |  4
  4 |  4
  5 |  0
  5 |  0
  6 |  1
  6 |  1
  7 |  2
  7 |  2
  8 |  3
  8 |  3
  9 |  4
  9 |  4
 10 |  0
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
 21 |  1
 22 |  2
 23 |  3
 24 |  4
 25 |  0
 26 |  1
 27 |  2
 28 |  3
 29 |  4
 30 |  0
(40 rows)

(select * from T_b2) UNION ALL (select * from T_random) order by 1;
 b1 | b2 
----+----
  1 |  1
  1 |  1
  2 |  2
  2 |  2
  3 |  3
  3 |  3
  4 |  4
  4 |  4
  5 |  0
  5 |  0
  6 |  1
  6 |  1
  7 |  2
  7 |  2
  8 |  3
  8 |  3
  9 |  4
  9 |  4
 10 |  0
 10 |  0
 11 |  1
 11 |  1
 12 |  2
 12 |  2
 13 |  3
 13 |  3
 14 |  4
 14 |  4
 15 |  0
 15 |  0
 16 |  1
 16 |  1
 17 |  2
 17 |  2
 18 |  3
 18 |  3
 19 |  4
 19 |  4
 20 |  0
 20 |  0
 21 |  1
 22 |  2
 23 |  3
 24 |  4
 25 |  0
 26 |  1
 27 |  2
 28 |  3
 29 |  4
 30 |  0
(50 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select a1 from T_a1) UNION ALL (select d1 from T_constant) order by 1;
 a1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
 200
 300
(13 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant) UNION ALL (select a1 from T_a1) order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
 200
 300
(13 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select c1 from T_random) UNION ALL (select d1 from T_constant) order by 1;
 c1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION ALL SELECT 200, 200
UNION ALL SELECT 300, 300)
(select d1 from T_constant) UNION ALL (select c1 from T_random) order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

--
-- Binary UNION results
-- @optimizer_mode off
(select a1 from T_a1) UNION (select b1 from T_b2) order by 1;
 a1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
(20 rows)

(select b1 from T_b2) UNION (select a1 from T_a1) order by 1;
 b1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
(20 rows)

(select a1 from T_a1) UNION (select c1 from T_random) order by 1;
 a1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
(30 rows)

(select c1 from T_random) UNION (select a1 from T_a1) order by 1;
 c1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
(30 rows)

(select * from T_a1) UNION (select * from T_b2) order by 1;
 a1 | a2 
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  0
  6 |  1
  7 |  2
  8 |  3
  9 |  4
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
(20 rows)

(select * from T_a1) UNION (select * from T_random) order by 1;
 a1 | a2 
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  0
  6 |  1
  7 |  2
  8 |  3
  9 |  4
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
 21 |  1
 22 |  2
 23 |  3
 24 |  4
 25 |  0
 26 |  1
 27 |  2
 28 |  3
 29 |  4
 30 |  0
(30 rows)

(select * from T_b2) UNION (select * from T_random) order by 1;
 b1 | b2 
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  0
  6 |  1
  7 |  2
  8 |  3
  9 |  4
 10 |  0
 11 |  1
 12 |  2
 13 |  3
 14 |  4
 15 |  0
 16 |  1
 17 |  2
 18 |  3
 19 |  4
 20 |  0
 21 |  1
 22 |  2
 23 |  3
 24 |  4
 25 |  0
 26 |  1
 27 |  2
 28 |  3
 29 |  4
 30 |  0
(30 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select a1 from T_a1) UNION (select d1 from T_constant) order by 1;
 a1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
 200
 300
(13 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant) UNION (select a1 from T_a1) order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
 100
 200
 300
(13 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select c1 from T_random) UNION (select d1 from T_constant) order by 1;
 c1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

with T_constant (d1, d2) as(
SELECT 100, 100
UNION SELECT 200, 200
UNION SELECT 300, 300)
(select d1 from T_constant) UNION (select c1 from T_random) order by 1;
 d1  
-----
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
 100
 200
 300
(33 rows)

-- Test that we push quals into UNION sub-selects only when it's safe
-- @optimizer_mode off
explain
SELECT * FROM
  (SELECT 1 AS t, 2 AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4;
                         QUERY PLAN                         
------------------------------------------------------------
 Unique  (cost=0.05..0.07 rows=1 width=0)
   Group By: t, x
   ->  Sort  (cost=0.05..0.06 rows=1 width=0)
         Sort Key (Distinct): t, x
         ->  Append  (cost=0.00..0.04 rows=1 width=0)
               ->  Result  (cost=0.00..0.01 rows=1 width=0)
               ->  Result  (cost=0.00..0.01 rows=1 width=0)
                     One-Time Filter: false
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
(10 rows)

SELECT * FROM
  (SELECT 1 AS t, 2 AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4;
 t | x 
---+---
 1 | 2
(1 row)

explain
SELECT * FROM
  (SELECT 1 AS t, generate_series(1,10) AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort  (cost=0.10..0.11 rows=1 width=8)
   Sort Key: ss.x
   ->  Subquery Scan ss  (cost=0.05..0.09 rows=1 width=8)
         Filter: x < 4
         ->  Unique  (cost=0.05..0.07 rows=1 width=0)
               Group By: t, x
               ->  Sort  (cost=0.05..0.06 rows=1 width=0)
                     Sort Key (Distinct): t, x
                     ->  Append  (cost=0.00..0.04 rows=1 width=0)
                           ->  Result  (cost=0.00..0.01 rows=1 width=0)
                           ->  Result  (cost=0.00..0.01 rows=1 width=0)
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
(13 rows)

SELECT * FROM
  (SELECT 1 AS t, generate_series(1,10) AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
 t | x 
---+---
 1 | 1
 1 | 2
 1 | 3
(3 rows)

explain
SELECT * FROM
  (SELECT 1 AS t, (random()*3)::int AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x > 3;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Subquery Scan ss  (cost=0.07..0.11 rows=1 width=8)
   Filter: x > 3
   ->  Unique  (cost=0.07..0.08 rows=1 width=0)
         Group By: t, x
         ->  Sort  (cost=0.07..0.07 rows=1 width=0)
               Sort Key (Distinct): t, x
               ->  Append  (cost=0.01..0.06 rows=1 width=0)
                     ->  Result  (cost=0.01..0.03 rows=1 width=0)
                           InitPlan
                             ->  Result  (cost=0.00..0.01 rows=1 width=0)
                     ->  Result  (cost=0.00..0.01 rows=1 width=0)
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
(13 rows)

SELECT * FROM
  (SELECT 1 AS t, (random()*3)::int AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x > 3;
 t | x 
---+---
 2 | 4
(1 row)

CREATE TABLE foo_union (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE bar_union (c int, d int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO foo_union VALUES (1,1), (5,5);
INSERT INTO bar_union VALUES (5,5), (2,2);
EXPLAIN SELECT *
from
    (
    SELECT 1 AS ss
    UNION
    SELECT DISTINCT
        (
           SELECT bar_union.c FROM bar_union WHERE bar_union.c = foo_union.b 
        ) AS ss
        FROM foo_union
) ABC
where ABC.ss = 5;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=10.32..10.38 rows=1 width=4)
   ->  Subquery Scan abc  (cost=10.32..10.38 rows=1 width=4)
         Filter: ss = 5
         ->  Unique  (cost=10.32..10.34 rows=1 width=3)
               Group By: ss
               ->  Sort  (cost=10.32..10.33 rows=1 width=3)
                     Sort Key (Distinct): ss
                     ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..10.30 rows=1 width=3)
                           Hash Key: ss
                           ->  Append  (cost=0.00..10.30 rows=1 width=3)
                                 ->  Redistribute Motion 1:3  (slice1; segments: 1)  (cost=0.00..0.02 rows=1 width=0)
                                       Hash Key: ss
                                       ->  Result  (cost=0.00..0.01 rows=1 width=0)
                                 ->  GroupAggregate  (cost=10.21..10.26 rows=1 width=4)
                                       Group By: "?column1?"
                                       ->  Sort  (cost=10.21..10.21 rows=1 width=4)
                                             Sort Key: unnamed_attr_1
                                             ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=6.08..10.20 rows=1 width=4)
                                                   Hash Key: "?column1?"
                                                   ->  GroupAggregate  (cost=6.08..10.16 rows=1 width=4)
                                                         Group By: "?column2?"
                                                         ->  Sort  (cost=6.08..6.08 rows=1 width=4)
                                                               Sort Key: "?column2?"
                                                               ->  Seq Scan on foo_union  (cost=0.00..6.07 rows=1 width=4)
                                                                     SubPlan 1
                                                                       ->  Result  (cost=2.03..2.04 rows=1 width=4)
                                                                             Filter: bar_union.c = $0
                                                                             ->  Materialize  (cost=2.03..2.04 rows=1 width=4)
                                                                                   ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..2.02 rows=1 width=4)
                                                                                         ->  Seq Scan on bar_union  (cost=0.00..2.02 rows=1 width=4)
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
(32 rows)

SELECT *
from
    (
    SELECT 1 AS ss
    UNION
    SELECT DISTINCT
        (
           SELECT bar_union.c FROM bar_union WHERE bar_union.c = foo_union.b 
        ) AS ss
        FROM foo_union
) ABC
where ABC.ss = 5;
 ss 
----
  5
(1 row)

--
-- Clean up
--
DROP TABLE IF EXISTS T_a1 CASCADE;
DROP TABLE IF EXISTS T_b2 CASCADE;
DROP TABLE IF EXISTS T_random CASCADE;
DROP TABLE IF EXISTS foo_union;
DROP TABLE IF EXISTS bar_union;
reset optimizer;
-- EOF
